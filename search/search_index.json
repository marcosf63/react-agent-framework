{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReAct Agent Framework","text":"<p> Complete AI agent framework with MCP support, environments, reasoning strategies, objectives, memory, and built-in tools </p> <p> </p> <p> Getting Started View on GitHub </p>"},{"location":"#what-is-react","title":"What is ReAct?","text":"<p>ReAct (Reasoning + Acting) is a powerful agent pattern that combines:</p> <ul> <li>\ud83d\udcad Thought (Reasoning): Think about what to do next</li> <li>\u26a1 Action (Acting): Execute actions using available tools</li> <li>\ud83d\udc41\ufe0f Observation: Analyze the results and learn</li> </ul> <p>This cycle continues until the agent has enough information to provide a complete answer.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Multi-Provider Support</p> <p>Support for OpenAI, Anthropic, Google Gemini, and Ollama</p> <pre><code>agent = ReactAgent(provider=\"anthropic://claude-3-5-sonnet\")\n</code></pre> </li> <li> <p> Built-in Tools</p> <p>Search, filesystem, computation, and more</p> <pre><code>agent.use_tools(\"search.*\", \"filesystem.*\")\n</code></pre> </li> <li> <p> Memory Systems (v0.10.0+)</p> <p>Chat + Knowledge memory separation for better performance</p> <pre><code>agent = ReactAgent(\n    chat_memory=SQLiteChatMemory(\"./chat.db\"),\n    knowledge_memory=ChromaKnowledgeMemory(\"./kb\")\n)\n</code></pre> </li> <li> <p> Objectives System</p> <p>Goal-oriented agent management with tracking</p> <pre><code>agent.objectives.add(Objective(goal=\"Complete task\"))\n</code></pre> </li> <li> <p> Reasoning Strategies</p> <p>ReAct, ReWOO, Reflection, and Plan-Execute</p> <pre><code>reasoning = ReActReasoning(agent, tools)\n</code></pre> </li> <li> <p> Environment Interaction</p> <p>Web, CLI, and filesystem environments</p> <pre><code>env = WebEnvironment()\nenv.step(Action(\"navigate\", {\"url\": \"...\"}))\n</code></pre> </li> <li> <p> MCP Integration</p> <p>Connect to Model Context Protocol servers</p> <pre><code>agent.add_mcp_server(\"npx\", [\"-y\", \"@mcp/server-filesystem\"])\n</code></pre> </li> <li> <p> FastAPI-Style API</p> <p>Elegant and intuitive agent creation</p> <pre><code>@agent.tool()\ndef search(query: str) -&gt; str:\n    return results\n</code></pre> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install react-agent-framework\n</code></pre>"},{"location":"#your-first-agent","title":"Your First Agent","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create an agent\nagent = ReactAgent(\n    name=\"Assistant\",\n    description=\"A helpful AI assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Add tools with decorators\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet for information\"\"\"\n    # Your search implementation\n    return search_results\n\n# Run the agent\nanswer = agent.run(\"What is the capital of France?\")\nprint(answer)  # \"The capital of France is Paris\"\n</code></pre> <p>That's it! You've created your first ReAct agent. </p>"},{"location":"#why-react-agent-framework","title":"Why ReAct Agent Framework?","text":""},{"location":"#simple-and-powerful","title":"Simple and Powerful","text":"<p>Clean, FastAPI-inspired API that makes building agents a breeze:</p> <pre><code>agent = ReactAgent(name=\"Research Agent\")\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for information\"\"\"\n    return results\n\nanswer = agent.run(\"Research quantum computing\")\n</code></pre>"},{"location":"#plug-and-play","title":"Plug and Play","text":"<p>Switch between AI providers with a single line:</p> OpenAIAnthropicGoogleOllama <pre><code>agent = ReactAgent(provider=\"gpt-4o-mini\")\n</code></pre> <pre><code>agent = ReactAgent(provider=\"anthropic://claude-3-5-sonnet\")\n</code></pre> <pre><code>agent = ReactAgent(provider=\"google://gemini-1.5-flash\")\n</code></pre> <pre><code>agent = ReactAgent(provider=\"ollama://llama3.2\")\n</code></pre>"},{"location":"#batteries-included","title":"Batteries Included","text":"<p>Built-in tools for common tasks:</p> <pre><code># Use all search tools\nagent.use_tools(\"search.*\")\n\n# Use filesystem tools\nagent.use_tools(\"filesystem.read\", \"filesystem.write\")\n\n# Use computation tools\nagent.use_tools(\"computation.calculator\")\n\n# Or use everything\nagent.use_tools(\"*\")\n</code></pre>"},{"location":"#advanced-memory","title":"Advanced Memory","text":"<p>Multiple memory backends for context retention:</p> <pre><code>from react_agent_framework.core.memory import ChromaMemory, FAISSMemory\n\n# Vector-based memory with ChromaDB\nagent = ReactAgent(memory=ChromaMemory(collection_name=\"my_agent\"))\n\n# Or FAISS for high-performance similarity search\nagent = ReactAgent(memory=FAISSMemory(dimension=1536))\n</code></pre>"},{"location":"#goal-oriented","title":"Goal-Oriented","text":"<p>Track and pursue objectives:</p> <pre><code>from react_agent_framework.core.objectives import Objective, Priority\n\nagent.objectives.add(Objective(\n    goal=\"Research climate change solutions\",\n    priority=Priority.HIGH,\n    success_criteria=[\"Find 5 viable solutions\", \"Analyze feasibility\"]\n))\n\n# Agent keeps objectives in mind while working\nanswer = agent.run(\"Help me with climate research\")\n</code></pre>"},{"location":"#multiple-reasoning-strategies","title":"Multiple Reasoning Strategies","text":"<p>Choose how your agent thinks:</p> <pre><code>from react_agent_framework.core.reasoning import (\n    ReActReasoning,      # Iterative thought-action-observation\n    ReWOOReasoning,      # Plan all actions upfront\n    ReflectionReasoning, # Self-critique and improve\n    PlanExecuteReasoning # Adaptive planning\n)\n\nreasoning = ReActReasoning(agent, tools)\nresult = reasoning.reason(\"Complex problem to solve\")\n</code></pre>"},{"location":"#environment-interaction","title":"Environment Interaction","text":"<p>Agents can interact with different environments:</p> <pre><code>from react_agent_framework.core.environment import (\n    WebEnvironment,   # Browser automation\n    CLIEnvironment,   # Shell commands\n    FileEnvironment   # File operations\n)\n\n# Web browsing\nweb_env = WebEnvironment()\nweb_env.step(Action(\"navigate\", {\"url\": \"https://example.com\"}))\n\n# Safe shell execution\ncli_env = CLIEnvironment(safe_mode=True)\ncli_env.step(Action(\"execute\", {\"command\": \"ls -la\"}))\n</code></pre>"},{"location":"#mcp-integration","title":"MCP Integration","text":"<p>Connect to external tool servers:</p> <pre><code># Connect to filesystem MCP server\nagent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"],\n    name=\"filesystem\"\n)\n\n# Connect to GitHub MCP server\nagent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-github\"],\n    env={\"GITHUB_TOKEN\": \"ghp_...\"},\n    name=\"github\"\n)\n\n# All MCP tools are automatically available!\n</code></pre>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li> <p> 5-Minute Quickstart</p> <p>Get up and running in minutes</p> <p> Quickstart</p> </li> <li> <p> Feature Guides</p> <p>Deep dive into all features</p> <p> Features</p> </li> <li> <p> API Reference</p> <p>Complete API documentation</p> <p> API</p> </li> <li> <p> Examples</p> <p>Real-world usage examples</p> <p> Examples</p> </li> <li> <p> LLMs.txt</p> <p>Complete documentation for LLM consumption (800+ lines)</p> <p> LLMs.txt</p> </li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li> GitHub Repository</li> <li> Report Issues</li> <li> Contact</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p> <p> Built with :heart: using ReAct Agent Framework </p> <p> Get Started Now </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to ReAct Agent Framework are documented here.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#090-2025-01-07","title":"[0.9.0] - 2025-01-07","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>MCP Integration: Full support for Model Context Protocol</li> <li><code>MCPClient</code> for managing server connections</li> <li><code>MCPToolAdapter</code> for tool integration</li> <li><code>MCPConfigManager</code> for server configuration</li> <li><code>add_mcp_server()</code> method in ReactAgent</li> <li>Support for popular MCP servers (filesystem, github, postgres, etc.)</li> <li>MCP demo example in <code>examples/mcp_demo.py</code></li> <li>Complete documentation site with Material for MkDocs</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated package description to include MCP support</li> <li>Enhanced ReactAgent with MCP methods</li> </ul>"},{"location":"changelog/#080-2025-01-06","title":"[0.8.0] - 2025-01-06","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Environment System: Agent-environment interaction framework</li> <li><code>BaseEnvironment</code> abstract class</li> <li><code>WebEnvironment</code> for browser automation</li> <li><code>CLIEnvironment</code> for shell command execution</li> <li><code>FileEnvironment</code> for file operations</li> <li><code>EnvironmentState</code> for state tracking</li> <li>Safe mode for all environments</li> </ul>"},{"location":"changelog/#070-2025-01-06","title":"[0.7.0] - 2025-01-06","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Reasoning Strategies: Multiple reasoning approaches</li> <li><code>ReActReasoning</code>: Iterative thought-action-observation</li> <li><code>ReWOOReasoning</code>: Plan-then-execute (Reasoning Without Observation)</li> <li><code>ReflectionReasoning</code>: Self-critique and improve</li> <li><code>PlanExecuteReasoning</code>: Adaptive planning with updates</li> <li><code>BaseReasoning</code> abstract class</li> <li><code>ReasoningResult</code> dataclass</li> </ul>"},{"location":"changelog/#060-2025-01-05","title":"[0.6.0] - 2025-01-05","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Objectives System: Goal-oriented agent management</li> <li><code>Objective</code> class with priority levels</li> <li><code>ObjectiveTracker</code> for managing multiple objectives</li> <li>Progress tracking and status management</li> <li>Success criteria support</li> <li>Integration with ReactAgent</li> </ul>"},{"location":"changelog/#050-2025-01-05","title":"[0.5.0] - 2025-01-05","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Memory Systems: Context retention across conversations</li> <li><code>SimpleMemory</code>: In-memory conversation history</li> <li><code>ChromaMemory</code>: Vector-based memory with ChromaDB</li> <li><code>FAISSMemory</code>: High-performance similarity search</li> <li><code>BaseMemory</code> abstract class</li> </ul>"},{"location":"changelog/#040-2025-01-04","title":"[0.4.0] - 2025-01-04","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Built-in Tools System: Registry-based tool management</li> <li><code>ToolRegistry</code> for discovering and managing tools</li> <li><code>use_tools()</code> method with pattern matching</li> <li>Filesystem tools (read, write, list, delete)</li> <li>Computation tools (calculator, code executor, shell)</li> <li>Search tools (DuckDuckGo)</li> </ul>"},{"location":"changelog/#030-2025-01-04","title":"[0.3.0] - 2025-01-04","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Multi-Provider Support: Support for multiple LLM providers</li> <li>OpenAI (default)</li> <li>Anthropic Claude</li> <li>Google Gemini</li> <li>Ollama (local)</li> <li><code>BaseLLMProvider</code> abstract class</li> <li>Provider factory for easy switching</li> </ul>"},{"location":"changelog/#020-2025-01-03","title":"[0.2.0] - 2025-01-03","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>FastAPI-style API with decorators</li> <li><code>@agent.tool()</code> decorator for registering tools</li> <li>Rich configuration options</li> <li>Type hints throughout</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved API design</li> <li>Better error handling</li> </ul>"},{"location":"changelog/#010-2025-01-02","title":"[0.1.0] - 2025-01-02","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Initial release</li> <li>Basic ReactAgent implementation</li> <li>ReAct pattern (Reasoning + Acting)</li> <li>OpenAI integration</li> <li>CLI with Typer and Rich</li> <li>Basic examples</li> </ul>"},{"location":"changelog/#future-releases","title":"Future Releases","text":""},{"location":"changelog/#planned-for-100","title":"Planned for 1.0.0","text":"<ul> <li>Stable API</li> <li>Comprehensive test coverage (&gt;80%)</li> <li>Full CI/CD pipeline</li> <li>PyPI publication</li> <li>Production-ready documentation</li> </ul>"},{"location":"changelog/#under-consideration","title":"Under Consideration","text":"<ul> <li>More LLM providers</li> <li>Additional reasoning strategies</li> <li>Advanced tool system</li> <li>Plugin architecture</li> <li>Web UI for agent monitoring</li> </ul> <p>For detailed changes, see GitHub Releases.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to ReAct Agent Framework!</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Found a bug? Open an issue with:</p> <ul> <li>Clear description</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Python version and environment</li> </ul>"},{"location":"contributing/#suggest-features","title":"Suggest Features","text":"<p>Have an idea? Open an issue with:</p> <ul> <li>Feature description</li> <li>Use case</li> <li>Proposed implementation (optional)</li> </ul>"},{"location":"contributing/#submit-code","title":"Submit Code","text":"<ol> <li>Fork the repository</li> <li>Create a branch (<code>git checkout -b feature/MyFeature</code>)</li> <li>Make your changes</li> <li>Run tests and linting</li> <li>Commit (<code>git commit -m 'Add MyFeature'</code>)</li> <li>Push (<code>git push origin feature/MyFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<pre><code># Clone your fork\ngit clone https://github.com/YOUR_USERNAME/react-agent-framework.git\ncd react-agent-framework\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate\n\n# Install in editable mode with dev dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"contributing/#code-quality","title":"Code Quality","text":""},{"location":"contributing/#format-code","title":"Format Code","text":"<pre><code>black react_agent_framework/\n</code></pre>"},{"location":"contributing/#lint-code","title":"Lint Code","text":"<pre><code>ruff check react_agent_framework/\n</code></pre>"},{"location":"contributing/#type-check","title":"Type Check","text":"<pre><code>mypy react_agent_framework/ --ignore-missing-imports\n</code></pre>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow Conventional Commits:</p> <ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix</li> <li><code>docs:</code> Documentation</li> <li><code>refactor:</code> Code refactoring</li> <li><code>test:</code> Tests</li> <li><code>chore:</code> Maintenance</li> </ul> <p>Example: <pre><code>feat: add support for Google Gemini provider\n\nAdds GoogleProvider class with proper integration\n</code></pre></p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Keep PRs focused on a single feature/fix</li> <li>Add tests for new features</li> <li>Update documentation</li> <li>Ensure CI passes</li> <li>Link related issues</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"llms-txt/","title":"LLMs.txt - Complete Documentation for AI Models","text":"<p>The LLMs.txt file contains the complete framework documentation optimized for Large Language Model consumption.</p>"},{"location":"llms-txt/#overview","title":"Overview","text":"<p>LLMs.txt is a comprehensive, structured documentation file designed specifically for AI models to understand and use the ReAct Agent Framework effectively.</p> <p>File Location: <code>LLMs.txt</code></p> <p>Size: 800+ lines Format: Plain text with clear structure Coverage: All versions from v0.1.0 to v0.12.0</p>"},{"location":"llms-txt/#whats-included","title":"What's Included","text":""},{"location":"llms-txt/#1-overview-quick-start","title":"1. Overview &amp; Quick Start","text":"<p>Complete introduction with working examples</p>"},{"location":"llms-txt/#2-installation","title":"2. Installation","text":"<p>All installation methods and options</p>"},{"location":"llms-txt/#3-core-concepts","title":"3. Core Concepts","text":"<p>ReAct pattern, agent creation, tool registration</p>"},{"location":"llms-txt/#4-memory-systems-v0100","title":"4. Memory Systems (v0.10.0+)","text":"<ul> <li>ChatMemory (SimpleChatMemory, SQLiteChatMemory)</li> <li>KnowledgeMemory (ChromaKnowledgeMemory, FAISSKnowledgeMemory)</li> <li>Complete API and examples</li> </ul>"},{"location":"llms-txt/#5-multi-provider-support","title":"5. Multi-Provider Support","text":"<p>OpenAI, Anthropic, Google, Ollama configuration</p>"},{"location":"llms-txt/#6-built-in-tools","title":"6. Built-in Tools","text":"<p>Search, filesystem, computation tools</p>"},{"location":"llms-txt/#7-objectives-system","title":"7. Objectives System","text":"<p>Goal tracking and management</p>"},{"location":"llms-txt/#8-reasoning-strategies","title":"8. Reasoning Strategies","text":"<p>ReAct, ReWOO, Reflection, Plan-Execute</p>"},{"location":"llms-txt/#9-environments","title":"9. Environments","text":"<p>Web, CLI, File environment interaction</p>"},{"location":"llms-txt/#10-mcp-integration","title":"10. MCP Integration","text":"<p>Model Context Protocol server setup</p>"},{"location":"llms-txt/#11-layer-4-infrastructure-v0110","title":"11. Layer 4: Infrastructure (v0.11.0)","text":"<p>Complete production infrastructure: - Monitoring: Metrics, logging, telemetry - Resilience: Retry, circuit breaker, fallback, timeout - Security: RBAC, sandbox, audit, secrets - Cost Control: Budget, rate limiting, quotas - Human-in-the-Loop: Approval, intervention, feedback</p>"},{"location":"llms-txt/#12-layer-3-multi-agent-systems-v0120","title":"12. Layer 3: Multi-Agent Systems (v0.12.0)","text":"<p>Complete multi-agent capabilities: - Communication: Messages, protocols, channels - Orchestration: Orchestrator, workflows, task delegation - Coordination: Shared state, consensus, locking - Collaboration: Teams, patterns, negotiation</p>"},{"location":"llms-txt/#13-complete-api-reference","title":"13. Complete API Reference","text":"<p>All classes, methods, parameters, and return types</p>"},{"location":"llms-txt/#14-examples-use-cases","title":"14. Examples &amp; Use Cases","text":"<p>5 complete, production-ready examples: 1. Simple Q&amp;A Agent 2. Research Agent with Memory 3. Production Agent with Infrastructure 4. Multi-Agent System 5. Complete Enterprise System</p>"},{"location":"llms-txt/#why-llmstxt","title":"Why LLMs.txt?","text":""},{"location":"llms-txt/#for-ai-models","title":"For AI Models","text":"<ul> <li>Structured format optimized for AI consumption</li> <li>Complete coverage of all features in one file</li> <li>Working examples with full context</li> <li>No navigation required - everything in sequence</li> <li>Version tracking - clear indication of feature versions</li> </ul>"},{"location":"llms-txt/#for-developers","title":"For Developers","text":"<ul> <li>Quick reference for AI pair programming</li> <li>Copy-paste ready code examples</li> <li>Architecture overview in one place</li> <li>Version history and migration paths</li> </ul>"},{"location":"llms-txt/#how-to-use","title":"How to Use","text":""},{"location":"llms-txt/#as-a-developer","title":"As a Developer","text":"<p>1. Share with AI assistants: <pre><code># Copy to clipboard\ncat LLMs.txt | pbcopy  # macOS\ncat LLMs.txt | xclip   # Linux\n</code></pre></p> <p>2. Reference in prompts: <pre><code>\"Using the ReAct Agent Framework as described in LLMs.txt,\ncreate an agent that...\"\n</code></pre></p> <p>3. Quick lookup: <pre><code># Find specific topics\ngrep -A 10 \"Multi-Agent\" LLMs.txt\ngrep -A 20 \"Memory Systems\" LLMs.txt\n</code></pre></p>"},{"location":"llms-txt/#as-an-ai-model","title":"As an AI Model","text":"<p>The file is structured with clear section markers: <pre><code>================================================================================\nSECTION NAME\n================================================================================\n</code></pre></p> <p>Each section includes: - Concept explanation - Code examples - API signatures - Best practices - Common patterns</p>"},{"location":"llms-txt/#example-content-structure","title":"Example Content Structure","text":"<pre><code>================================================================================\n4. MEMORY SYSTEMS (v0.10.0+)\n================================================================================\n\nIMPORTANT: v0.10.0 separated memory into TWO types:\n- Chat Memory: Sequential conversation history\n- Knowledge Memory: Semantic knowledge base (RAG)\n\nCHAT MEMORY:\n------------\n\nSimpleChatMemory (Development):\n```python\nfrom react_agent_framework.core.memory.chat import SimpleChatMemory\n\nagent = ReactAgent(\n    name=\"Agent\",\n    chat_memory=SimpleChatMemory(max_messages=100)\n)\n</code></pre> <p>[... complete examples and API ...] <pre><code>---\n\n## Keeping Updated\n\nThe LLMs.txt file is updated with each release:\n\n- **v0.12.0**: Added Layer 3 (Multi-Agent Systems)\n- **v0.11.0**: Added Layer 4 (Infrastructure)\n- **v0.10.0**: Added Memory System Refactoring\n- **v0.9.0**: Initial LLMs.txt creation\n\n---\n\n## Download\n\n**Direct link**: [LLMs.txt on GitHub](https://github.com/marcosf63/react-agent-framework/blob/main/LLMs.txt)\n\n**Raw file**: [Raw LLMs.txt](https://raw.githubusercontent.com/marcosf63/react-agent-framework/main/LLMs.txt)\n\n```bash\n# Download with curl\ncurl -O https://raw.githubusercontent.com/marcosf63/react-agent-framework/main/LLMs.txt\n\n# Download with wget\nwget https://raw.githubusercontent.com/marcosf63/react-agent-framework/main/LLMs.txt\n</code></pre></p>"},{"location":"llms-txt/#contribute","title":"Contribute","text":"<p>Found an issue or want to improve LLMs.txt?</p> <ol> <li>Open an issue</li> <li>Submit a PR</li> </ol> <p>The file is located at the repository root: <code>/LLMs.txt</code></p>"},{"location":"llms-txt/#see-also","title":"See Also","text":"<ul> <li>Documentation Home</li> <li>API Reference</li> <li>Examples</li> <li>GitHub Repository</li> </ul>"},{"location":"api-reference/environments/","title":"Environments API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/mcp/","title":"Mcp API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/memory/","title":"Memory API Reference","text":"<p>Complete API reference for memory systems (v0.10.0+).</p>"},{"location":"api-reference/memory/#overview","title":"Overview","text":"<p>Since v0.10.0, memory is split into two types:</p> <ul> <li>Chat Memory: Sequential conversation history</li> <li>Knowledge Memory: Semantic knowledge base (RAG)</li> </ul>"},{"location":"api-reference/memory/#chat-memory","title":"Chat Memory","text":""},{"location":"api-reference/memory/#basechatmemory-abstract","title":"BaseChatMemory (Abstract)","text":"<p>Base interface for all chat memory implementations.</p> <pre><code>from react_agent_framework.core.memory.chat import BaseChatMemory\n</code></pre>"},{"location":"api-reference/memory/#methods","title":"Methods","text":"<p>add_message(content: str, role: str = \"user\", metadata: Optional[Dict] = None) -&gt; None</p> <p>Add a message to chat history.</p> <p>get_history(max_messages: Optional[int] = None) -&gt; List[ChatMessage]</p> <p>Retrieve conversation history.</p> <p>clear() -&gt; None</p> <p>Clear all chat history.</p> <p>get_stats() -&gt; Dict[str, Any]</p> <p>Get memory statistics.</p>"},{"location":"api-reference/memory/#simplechatmemory","title":"SimpleChatMemory","text":"<p>In-memory chat buffer for development.</p> <pre><code>from react_agent_framework.core.memory.chat import SimpleChatMemory\n\nmemory = SimpleChatMemory(max_messages=100)\n</code></pre>"},{"location":"api-reference/memory/#sqlitechatmemory","title":"SQLiteChatMemory","text":"<p>Persistent chat storage with SQLite.</p> <pre><code>from react_agent_framework.core.memory.chat import SQLiteChatMemory\n\nmemory = SQLiteChatMemory(\n    db_path=\"./chat.db\",\n    session_id=\"user_123\",\n    max_messages=1000\n)\n</code></pre>"},{"location":"api-reference/memory/#knowledge-memory","title":"Knowledge Memory","text":""},{"location":"api-reference/memory/#baseknowledgememory-abstract","title":"BaseKnowledgeMemory (Abstract)","text":"<p>Base interface for all knowledge memory implementations.</p> <pre><code>from react_agent_framework.core.memory.knowledge import BaseKnowledgeMemory\n</code></pre>"},{"location":"api-reference/memory/#methods_1","title":"Methods","text":"<p>add_document(content: str, metadata: Optional[Dict] = None) -&gt; str</p> <p>Add a document to knowledge base.</p> <p>search(query: str, top_k: int = 5, filter: Optional[Dict] = None) -&gt; List[KnowledgeDocument]</p> <p>Semantic search for documents.</p>"},{"location":"api-reference/memory/#chromaknowledgememory","title":"ChromaKnowledgeMemory","text":"<p>Vector database using ChromaDB.</p> <pre><code>from react_agent_framework.core.memory.knowledge import ChromaKnowledgeMemory\n\nmemory = ChromaKnowledgeMemory(\n    collection_name=\"docs\",\n    persist_directory=\"./kb\",\n    embedding_function=\"default\"\n)\n</code></pre>"},{"location":"api-reference/memory/#faissknowledgememory","title":"FAISSKnowledgeMemory","text":"<p>High-performance vector search using FAISS.</p> <pre><code>from react_agent_framework.core.memory.knowledge import FAISSKnowledgeMemory\n\nmemory = FAISSKnowledgeMemory(\n    index_path=\"./faiss\",\n    dimension=384,\n    index_type=\"Flat\"\n)\n</code></pre>"},{"location":"api-reference/memory/#see-also","title":"See Also","text":"<ul> <li>Memory Systems Feature Guide</li> <li>Memory Examples</li> </ul>"},{"location":"api-reference/objectives/","title":"Objectives API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/providers/","title":"Providers API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/react-agent/","title":"React-agent API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/reasoning/","title":"Reasoning API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/tools/","title":"Tools API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"examples/advanced/","title":"Advanced","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":"<p>This page provides practical examples to get you started with the ReAct Agent Framework. Each example is self-contained and demonstrates a specific use case.</p>"},{"location":"examples/basic-usage/#quick-start","title":"Quick Start","text":"<p>The simplest possible agent:</p> <pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(\n    name=\"Simple Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Add a tool\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform mathematical calculations\"\"\"\n    try:\n        result = eval(expression, {\"__builtins__\": {}}, {})\n        return f\"Result: {result}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Run agent\nanswer = agent.run(\"What is 15% of 340?\")\nprint(answer)  # Output: 15% of 340 is 51\n</code></pre>"},{"location":"examples/basic-usage/#example-1-web-research-assistant","title":"Example 1: Web Research Assistant","text":"<p>An agent that can search the web and answer questions:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom duckduckgo_search import DDGS\n\n# Create research agent\nagent = ReactAgent(\n    name=\"Research Assistant\",\n    provider=\"gpt-4o-mini\",\n    instructions=\"You are a helpful research assistant. Provide accurate, well-researched answers.\"\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet for information\"\"\"\n    try:\n        with DDGS() as ddgs:\n            results = list(ddgs.text(query, max_results=3))\n\n        if not results:\n            return \"No results found.\"\n\n        formatted = []\n        for i, result in enumerate(results, 1):\n            formatted.append(\n                f\"{i}. {result['title']}\\n   {result['body']}\\n   Source: {result['href']}\"\n            )\n\n        return \"\\n\\n\".join(formatted)\n    except Exception as e:\n        return f\"Search error: {str(e)}\"\n\n# Use the agent\nquestions = [\n    \"What are the latest trends in AI agents?\",\n    \"How does the ReAct pattern work?\",\n    \"What is Python used for?\"\n]\n\nfor question in questions:\n    print(f\"\\nQuestion: {question}\")\n    answer = agent.run(question, verbose=True)\n    print(f\"Answer: {answer}\\n\")\n    print(\"-\" * 80)\n</code></pre>"},{"location":"examples/basic-usage/#example-2-data-analysis-agent","title":"Example 2: Data Analysis Agent","text":"<p>An agent that can perform calculations and analyze data:</p> <pre><code>from react_agent_framework import ReactAgent\nimport json\n\nagent = ReactAgent(\n    name=\"Data Analyst\",\n    provider=\"gpt-4o-mini\",\n    instructions=\"\"\"You are a data analyst.\n    - Always verify your calculations\n    - Provide specific numbers and percentages\n    - Explain your reasoning\"\"\"\n)\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform mathematical calculations\"\"\"\n    try:\n        result = eval(expression, {\"__builtins__\": {}}, {})\n        return str(result)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n@agent.tool()\ndef get_sales_data() -&gt; str:\n    \"\"\"Get sample sales data\"\"\"\n    data = {\n        \"Q1\": 125000,\n        \"Q2\": 148000,\n        \"Q3\": 132000,\n        \"Q4\": 175000\n    }\n    return json.dumps(data)\n\n# Analyze data\nquestions = [\n    \"What were the total sales for the year?\",\n    \"Which quarter had the highest sales?\",\n    \"What was the percentage growth from Q1 to Q4?\",\n    \"What was the average quarterly sales?\"\n]\n\nfor question in questions:\n    print(f\"\\n\ud83d\udcca {question}\")\n    answer = agent.run(question, verbose=True)\n    print(f\"\u2705 {answer}\\n\")\n</code></pre>"},{"location":"examples/basic-usage/#example-3-file-management-agent","title":"Example 3: File Management Agent","text":"<p>An agent that can interact with the file system:</p> <pre><code>from react_agent_framework import ReactAgent\nimport os\nimport json\n\nagent = ReactAgent(\n    name=\"File Manager\",\n    provider=\"gpt-4o-mini\",\n    instructions=\"Help users manage and organize their files safely.\"\n)\n\n@agent.tool()\ndef list_files(directory: str = \".\") -&gt; str:\n    \"\"\"List files in a directory\"\"\"\n    try:\n        files = os.listdir(directory)\n        return f\"Files in {directory}:\\n\" + \"\\n\".join(f\"  - {f}\" for f in files)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n@agent.tool()\ndef read_file(filepath: str) -&gt; str:\n    \"\"\"Read contents of a file\"\"\"\n    try:\n        with open(filepath, 'r') as f:\n            content = f.read()\n        return f\"Content of {filepath}:\\n{content}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n@agent.tool()\ndef create_file(filepath: str, content: str) -&gt; str:\n    \"\"\"Create a new file with content\"\"\"\n    try:\n        with open(filepath, 'w') as f:\n            f.write(content)\n        return f\"\u2705 Created {filepath}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Use the agent\ntasks = [\n    \"List all files in the current directory\",\n    \"Create a file called 'notes.txt' with the content 'Meeting notes for today'\",\n    \"Read the contents of notes.txt\"\n]\n\nfor task in tasks:\n    print(f\"\\n\ud83d\udd27 Task: {task}\")\n    result = agent.run(task)\n    print(f\"\u2705 {result}\\n\")\n</code></pre>"},{"location":"examples/basic-usage/#example-4-multi-tool-agent","title":"Example 4: Multi-Tool Agent","text":"<p>An agent with multiple capabilities:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom datetime import datetime\nimport random\n\nagent = ReactAgent(\n    name=\"Multi-Purpose Assistant\",\n    provider=\"gpt-4o-mini\",\n    max_iterations=15\n)\n\n@agent.tool()\ndef get_current_time() -&gt; str:\n    \"\"\"Get the current time\"\"\"\n    return datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform calculations\"\"\"\n    try:\n        result = eval(expression, {\"__builtins__\": {}}, {})\n        return str(result)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n@agent.tool()\ndef generate_random_number(min_val: int = 1, max_val: int = 100) -&gt; str:\n    \"\"\"Generate a random number between min and max\"\"\"\n    return str(random.randint(min_val, max_val))\n\n@agent.tool()\ndef get_day_of_week(date_str: str) -&gt; str:\n    \"\"\"Get day of week for a date (format: YYYY-MM-DD)\"\"\"\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        return date.strftime(\"%A\")\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Complex queries\nqueries = [\n    \"What time is it right now?\",\n    \"Calculate 25 * 48 + 130\",\n    \"Generate a random number between 1 and 50\",\n    \"What day of the week was 2024-01-01?\"\n]\n\nfor query in queries:\n    print(f\"\\n\u2753 {query}\")\n    answer = agent.run(query, verbose=True)\n    print(f\"\ud83d\udca1 {answer}\\n\")\n</code></pre>"},{"location":"examples/basic-usage/#example-5-agent-with-memory","title":"Example 5: Agent with Memory","text":"<p>An agent that remembers previous conversations:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import SimpleMemory\n\n# Create agent with memory\nagent = ReactAgent(\n    name=\"Personal Assistant\",\n    provider=\"gpt-4o-mini\",\n    memory=SimpleMemory(),\n    instructions=\"Remember what the user tells you and use that context in future responses.\"\n)\n\n@agent.tool()\ndef set_reminder(task: str) -&gt; str:\n    \"\"\"Set a reminder for a task\"\"\"\n    return f\"\u2705 Reminder set: {task}\"\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for information\"\"\"\n    return f\"Search results for: {query}\"\n\n# Conversation with context\nprint(\"Conversation 1:\")\nresponse1 = agent.run(\"My name is Alice and I love Python programming\")\nprint(response1)\n\nprint(\"\\nConversation 2:\")\nresponse2 = agent.run(\"What's my name?\")\nprint(response2)  # Agent remembers: \"Alice\"\n\nprint(\"\\nConversation 3:\")\nresponse3 = agent.run(\"What programming language do I like?\")\nprint(response3)  # Agent remembers: \"Python\"\n\nprint(\"\\nConversation 4:\")\nresponse4 = agent.run(\"Set a reminder to study Python tomorrow\")\nprint(response4)\n</code></pre>"},{"location":"examples/basic-usage/#example-6-agent-with-objectives","title":"Example 6: Agent with Objectives","text":"<p>An agent working towards specific goals:</p> <pre><code>from react_agent_framework import ReactAgent, Objective\n\n# Define objectives\nobjectives = [\n    Objective(\n        goal=\"Gather company information\",\n        priority=\"critical\",\n        success_criteria=[\"Get company name\", \"Get revenue data\"]\n    ),\n    Objective(\n        goal=\"Calculate growth metrics\",\n        priority=\"high\",\n        success_criteria=[\"Calculate YoY growth\"]\n    ),\n    Objective(\n        goal=\"Provide recommendation\",\n        priority=\"medium\",\n        success_criteria=[\"Analyze data\", \"Make recommendation\"]\n    )\n]\n\nagent = ReactAgent(\n    name=\"Business Analyst\",\n    provider=\"gpt-4o-mini\",\n    objectives=objectives,\n    instructions=\"Work through objectives systematically.\"\n)\n\n@agent.tool()\ndef get_company_data(company: str) -&gt; str:\n    \"\"\"Get company financial data\"\"\"\n    data = {\n        \"TechCorp\": {\"revenue_2023\": 500000, \"revenue_2024\": 650000},\n        \"DataInc\": {\"revenue_2023\": 300000, \"revenue_2024\": 420000}\n    }\n    return str(data.get(company, \"Company not found\"))\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform calculations\"\"\"\n    try:\n        return str(eval(expression, {\"__builtins__\": {}}, {}))\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Agent works towards objectives\nanswer = agent.run(\n    \"Analyze TechCorp's financial performance and provide investment recommendation\",\n    verbose=True\n)\n\nprint(f\"\\n\ud83d\udcca Analysis Result:\\n{answer}\\n\")\n\n# Check objective completion\nprint(\"\\n\u2705 Objectives Status:\")\nfor obj in agent.objective_tracker.objectives:\n    print(f\"  - {obj.goal}: {obj.status}\")\n</code></pre>"},{"location":"examples/basic-usage/#example-7-verbose-mode-for-debugging","title":"Example 7: Verbose Mode for Debugging","text":"<p>See agent's reasoning process:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Debug Agent\",\n    provider=\"gpt-4o-mini\"\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search tool\"\"\"\n    return f\"Results: Found information about {query}\"\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Calculate\"\"\"\n    return str(eval(expression, {\"__builtins__\": {}}, {}))\n\n# Run with verbose=True to see reasoning\nprint(\"=\" * 80)\nprint(\"VERBOSE MODE - See Agent Thinking\")\nprint(\"=\" * 80)\n\nanswer = agent.run(\n    \"Search for Python tutorials and calculate 10 + 20\",\n    verbose=True  # Shows Thought \u2192 Action \u2192 Observation\n)\n\nprint(\"=\" * 80)\nprint(f\"Final Answer: {answer}\")\nprint(\"=\" * 80)\n</code></pre> <p>Output: <pre><code>================================================================================\nVERBOSE MODE - See Agent Thinking\n================================================================================\n\n=== Iteration 1 ===\nThought: I need to search for Python tutorials first\nAction: search\nAction Input: Python tutorials\nObservation: Results: Found information about Python tutorials\n\n=== Iteration 2 ===\nThought: Now I need to calculate 10 + 20\nAction: calculate\nAction Input: 10 + 20\nObservation: 30\n\n=== Iteration 3 ===\nThought: I have both pieces of information now\nAction: finish\nAction Input: Found Python tutorials and 10 + 20 = 30\n\n================================================================================\nFinal Answer: Found Python tutorials and 10 + 20 = 30\n================================================================================\n</code></pre></p>"},{"location":"examples/basic-usage/#example-8-using-built-in-tools","title":"Example 8: Using Built-in Tools","text":"<p>Use framework's built-in tools:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Assistant with Built-in Tools\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Register built-in tools\nagent.use_tools(\"search.duckduckgo\")  # Web search\nagent.use_tools(\"filesystem.read\")     # Read files\nagent.use_tools(\"compute.calculate\")   # Math\n\n# Agent can now use these tools\nanswer = agent.run(\n    \"Search for 'Python ReAct agents' and calculate 25 * 4\",\n    verbose=True\n)\n\nprint(answer)\n</code></pre>"},{"location":"examples/basic-usage/#example-9-multi-provider-setup","title":"Example 9: Multi-Provider Setup","text":"<p>Use different LLM providers:</p> <pre><code>from react_agent_framework import ReactAgent\n\n# OpenAI (default)\nagent_openai = ReactAgent(\n    name=\"OpenAI Agent\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Anthropic Claude\nagent_claude = ReactAgent(\n    name=\"Claude Agent\",\n    provider=\"anthropic://claude-3-5-sonnet-20241022\"\n)\n\n# Google Gemini\nagent_gemini = ReactAgent(\n    name=\"Gemini Agent\",\n    provider=\"google://gemini-1.5-flash\"\n)\n\n# Ollama (local)\nagent_ollama = ReactAgent(\n    name=\"Llama Agent\",\n    provider=\"ollama://llama3.2\"\n)\n\n# Add tools to each\nfor agent in [agent_openai, agent_claude, agent_gemini, agent_ollama]:\n    @agent.tool()\n    def greet(name: str) -&gt; str:\n        return f\"Hello, {name}!\"\n\n# Compare responses\nquestion = \"Greet me using my name 'Alex'\"\n\nprint(\"\\nOpenAI:\", agent_openai.run(question))\nprint(\"\\nClaude:\", agent_claude.run(question))\nprint(\"\\nGemini:\", agent_gemini.run(question))\nprint(\"\\nLlama:\", agent_ollama.run(question))\n</code></pre>"},{"location":"examples/basic-usage/#example-10-temperature-control","title":"Example 10: Temperature Control","text":"<p>Control response creativity:</p> <pre><code>from react_agent_framework import ReactAgent\n\n# Deterministic (temperature=0)\nagent_precise = ReactAgent(\n    name=\"Precise Agent\",\n    provider=\"gpt-4o-mini\",\n    temperature=0  # Same output every time\n)\n\n# Creative (temperature=0.7)\nagent_creative = ReactAgent(\n    name=\"Creative Agent\",\n    provider=\"gpt-4o-mini\",\n    temperature=0.7  # Varied outputs\n)\n\n@agent_precise.tool()\n@agent_creative.tool()\ndef get_info() -&gt; str:\n    return \"The sky is blue\"\n\nquestion = \"Tell me about the sky\"\n\nprint(\"Precise agent (run 3 times):\")\nfor i in range(3):\n    print(f\"  {i+1}. {agent_precise.run(question)}\")\n\nprint(\"\\nCreative agent (run 3 times):\")\nfor i in range(3):\n    print(f\"  {i+1}. {agent_creative.run(question)}\")\n</code></pre>"},{"location":"examples/basic-usage/#common-patterns","title":"Common Patterns","text":""},{"location":"examples/basic-usage/#pattern-1-error-handling-in-tools","title":"Pattern 1: Error Handling in Tools","text":"<pre><code>@agent.tool()\ndef safe_divide(a: float, b: float) -&gt; str:\n    \"\"\"Safely divide two numbers\"\"\"\n    try:\n        if b == 0:\n            return \"Error: Division by zero\"\n        result = a / b\n        return f\"{a} / {b} = {result}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"examples/basic-usage/#pattern-2-stateful-tools","title":"Pattern 2: Stateful Tools","text":"<pre><code>class Counter:\n    def __init__(self):\n        self.count = 0\n\ncounter = Counter()\n\n@agent.tool()\ndef increment() -&gt; str:\n    \"\"\"Increment counter\"\"\"\n    counter.count += 1\n    return f\"Counter: {counter.count}\"\n\n@agent.tool()\ndef get_count() -&gt; str:\n    \"\"\"Get current count\"\"\"\n    return f\"Counter: {counter.count}\"\n</code></pre>"},{"location":"examples/basic-usage/#pattern-3-tool-with-multiple-parameters","title":"Pattern 3: Tool with Multiple Parameters","text":"<pre><code>@agent.tool()\ndef send_email(to: str, subject: str, body: str) -&gt; str:\n    \"\"\"Send an email\"\"\"\n    # Email logic here\n    return f\"\u2705 Email sent to {to} with subject '{subject}'\"\n</code></pre>"},{"location":"examples/basic-usage/#pattern-4-tool-returning-structured-data","title":"Pattern 4: Tool Returning Structured Data","text":"<pre><code>import json\n\n@agent.tool()\ndef get_user_info(user_id: int) -&gt; str:\n    \"\"\"Get user information\"\"\"\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\",\n        \"age\": 30\n    }\n    return json.dumps(user, indent=2)\n</code></pre>"},{"location":"examples/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Custom Tools - Create advanced custom tools</li> <li>Memory Systems - Add persistent memory</li> <li>Objectives - Goal-oriented agents</li> <li>Custom Providers - Use different LLMs</li> </ul>"},{"location":"examples/basic-usage/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"examples/basic-usage/#tip-1-clear-history-between-queries","title":"Tip 1: Clear History Between Queries","text":"<pre><code>agent.run(\"First question\")\nagent.clear_history()  # Start fresh\nagent.run(\"Unrelated question\")\n</code></pre>"},{"location":"examples/basic-usage/#tip-2-check-available-tools","title":"Tip 2: Check Available Tools","text":"<pre><code>tools = agent.get_tools()\nprint(f\"Agent has {len(tools)} tools:\")\nfor name, func in tools.items():\n    print(f\"  - {name}: {func.__doc__}\")\n</code></pre>"},{"location":"examples/basic-usage/#tip-3-get-provider-information","title":"Tip 3: Get Provider Information","text":"<pre><code>info = agent.get_provider_info()\nprint(f\"Provider: {info['provider']}\")\nprint(f\"Model: {info['model']}\")\n</code></pre>"},{"location":"examples/basic-usage/#tip-4-set-max-iterations","title":"Tip 4: Set Max Iterations","text":"<pre><code># For simple tasks\nagent_quick = ReactAgent(max_iterations=5)\n\n# For complex tasks\nagent_thorough = ReactAgent(max_iterations=20)\n</code></pre>"},{"location":"examples/basic-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/basic-usage/#issue-agent-doesnt-use-tools","title":"Issue: Agent doesn't use tools","text":"<p>Solution: Make sure tool docstrings are clear:</p> <pre><code># \u274c Bad: No docstring\n@agent.tool()\ndef search(q):\n    return results\n\n# \u2705 Good: Clear docstring\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet for information about the query\"\"\"\n    return results\n</code></pre>"},{"location":"examples/basic-usage/#issue-agent-hits-max-iterations","title":"Issue: Agent hits max iterations","text":"<p>Solution: Increase max_iterations or improve instructions:</p> <pre><code>agent = ReactAgent(\n    max_iterations=20,  # Increase limit\n    instructions=\"Break complex tasks into steps. Use available tools efficiently.\"\n)\n</code></pre>"},{"location":"examples/basic-usage/#issue-tool-errors-arent-handled","title":"Issue: Tool errors aren't handled","text":"<p>Solution: Add try-except in tools:</p> <pre><code>@agent.tool()\ndef risky_operation(data: str) -&gt; str:\n    \"\"\"Perform risky operation\"\"\"\n    try:\n        result = process(data)\n        return f\"Success: {result}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"  # Return error message\n</code></pre>"},{"location":"examples/data-analysis/","title":"Data-analysis","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"examples/web-research/","title":"Web-research","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"features/built-in-tools/","title":"Built-in Tools","text":"<p>ReAct Agent Framework comes with a rich set of built-in tools that agents can use out of the box.</p>"},{"location":"features/built-in-tools/#overview","title":"Overview","text":"<p>Built-in tools are organized into categories and can be registered using pattern matching:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Assistant\")\n\n# Register specific tool\nagent.use_tools(\"search.duckduckgo\")\n\n# Register all tools in a category\nagent.use_tools(\"filesystem.*\")\n\n# Register all available tools\nagent.use_tools(\"*\")\n</code></pre>"},{"location":"features/built-in-tools/#available-tools","title":"Available Tools","text":""},{"location":"features/built-in-tools/#search-tools","title":"Search Tools","text":"<p>Search the web for information using DuckDuckGo.</p>"},{"location":"features/built-in-tools/#searchduckduckgo","title":"<code>search.duckduckgo</code>","text":"<p>Search the internet for current information.</p> <p>Example:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Research Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Register search tool\nagent.use_tools(\"search.duckduckgo\")\n\n# Agent can now search the web\nanswer = agent.run(\"What is the latest version of Python?\", verbose=True)\nprint(answer)\n</code></pre> <p>Output: <pre><code>============================================================\nITERATION 1\n============================================================\n\nThought: I need to search for the latest Python version\nAction: search_duckduckgo\nAction Input: latest Python version 2024\n\nObservation: Python 3.12 is the latest stable version...\n\nThought: I have the information\nAction: finish\nAction Input: The latest version of Python is 3.12\n\n============================================================\nAnswer: The latest version of Python is 3.12\n</code></pre></p>"},{"location":"features/built-in-tools/#filesystem-tools","title":"Filesystem Tools","text":"<p>Interact with the local filesystem safely.</p>"},{"location":"features/built-in-tools/#filesystemread","title":"<code>filesystem.read</code>","text":"<p>Read contents of a file.</p>"},{"location":"features/built-in-tools/#filesystemwrite","title":"<code>filesystem.write</code>","text":"<p>Write content to a file.</p>"},{"location":"features/built-in-tools/#filesystemlist","title":"<code>filesystem.list</code>","text":"<p>List files in a directory.</p>"},{"location":"features/built-in-tools/#filesystemdelete","title":"<code>filesystem.delete</code>","text":"<p>Delete a file (use with caution!).</p> <p>Example:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"File Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Register all filesystem tools\nagent.use_tools(\"filesystem.*\")\n\n# List Python files\nanswer = agent.run(\"List all Python files in the current directory\")\nprint(answer)\n</code></pre> <p>Example Output: <pre><code>Found 5 Python files:\n- main.py\n- agent.py\n- tools.py\n- config.py\n- __init__.py\n</code></pre></p> <p>Read and Write Example:</p> <pre><code>agent = ReactAgent(name=\"File Manager\")\nagent.use_tools(\"filesystem.read\", \"filesystem.write\")\n\n# Read a file\nanswer = agent.run(\"Read the contents of README.md\")\n\n# Write to a file\nanswer = agent.run(\"Write 'Hello World' to test.txt\")\n</code></pre> <p>Safety</p> <p>Filesystem tools have built-in safety features:</p> <ul> <li>Cannot delete system files</li> <li>Cannot modify protected directories</li> <li>Requires confirmation for destructive operations</li> </ul>"},{"location":"features/built-in-tools/#computation-tools","title":"Computation Tools","text":"<p>Perform calculations and execute code safely.</p>"},{"location":"features/built-in-tools/#computationcalculator","title":"<code>computation.calculator</code>","text":"<p>Evaluate mathematical expressions.</p>"},{"location":"features/built-in-tools/#computationcode_executor","title":"<code>computation.code_executor</code>","text":"<p>Execute Python code safely (sandboxed).</p>"},{"location":"features/built-in-tools/#computationshell","title":"<code>computation.shell</code>","text":"<p>Execute shell commands (with restrictions).</p> <p>Calculator Example:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Math Assistant\",\n    provider=\"gpt-4o-mini\",\n    temperature=0  # Deterministic for calculations\n)\n\n# Register calculator\nagent.use_tools(\"computation.calculator\")\n\n# Perform calculations\nanswer = agent.run(\"What is 25 * 4 + 100 / 2?\")\nprint(answer)  # \"150\"\n</code></pre> <p>Complex Calculation:</p> <pre><code>agent = ReactAgent(name=\"Calculator\")\nagent.use_tools(\"computation.calculator\")\n\nanswer = agent.run(\"\"\"\nCalculate the compound interest for:\n- Principal: $1000\n- Rate: 5% per year\n- Time: 10 years\n- Compounded annually\n\nUse the formula: A = P(1 + r)^t\n\"\"\")\n\nprint(answer)  # Approximately $1628.89\n</code></pre>"},{"location":"features/built-in-tools/#pattern-matching","title":"Pattern Matching","text":"<p>Use glob-style patterns to register multiple tools:</p>"},{"location":"features/built-in-tools/#register-all-tools-in-category","title":"Register All Tools in Category","text":"<pre><code># All search tools\nagent.use_tools(\"search.*\")\n\n# All filesystem tools\nagent.use_tools(\"filesystem.*\")\n\n# All computation tools\nagent.use_tools(\"computation.*\")\n</code></pre>"},{"location":"features/built-in-tools/#register-specific-tools","title":"Register Specific Tools","text":"<pre><code># Just calculator and file list\nagent.use_tools(\n    \"computation.calculator\",\n    \"filesystem.list\"\n)\n</code></pre>"},{"location":"features/built-in-tools/#register-everything","title":"Register Everything","text":"<pre><code># All available tools\nagent.use_tools(\"*\")\n\n# Check what was registered\ntools = agent.get_tools()\nprint(f\"Registered {len(tools)} tools:\")\nfor name in tools:\n    print(f\"  - {name}\")\n</code></pre>"},{"location":"features/built-in-tools/#complete-example-multi-tool-agent","title":"Complete Example: Multi-Tool Agent","text":"<p>Combine different tool categories:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Multi-Tool Assistant\",\n    provider=\"gpt-4o-mini\",\n    temperature=0\n)\n\n# Register tools from different categories\nagent.use_tools(\n    \"search.duckduckgo\",      # Web search\n    \"computation.calculator\",  # Math\n    \"filesystem.list\"          # File operations\n)\n\n# Complex task using multiple tools\nanswer = agent.run(\"\"\"\n1. Search for the current Python version\n2. Calculate 2024 - 1991 (Python's birth year)\n3. List files in the current directory\n\"\"\", verbose=True)\n\nprint(f\"\\nFinal Answer:\\n{answer}\")\n</code></pre> <p>Expected Output: <pre><code>Final Answer:\n1. Python 3.12 is the current stable version\n2. Python is 33 years old (2024 - 1991 = 33)\n3. Found 5 files in current directory: main.py, README.md, ...\n</code></pre></p>"},{"location":"features/built-in-tools/#tool-registry-api","title":"Tool Registry API","text":""},{"location":"features/built-in-tools/#list-available-tools","title":"List Available Tools","text":"<pre><code>from react_agent_framework.tools.registry import ToolRegistry\n\n# Find all tools matching pattern\nsearch_tools = ToolRegistry.find_tools(\"search.*\")\nprint(f\"Found {len(search_tools)} search tools\")\n\n# Find all filesystem tools\nfs_tools = ToolRegistry.find_tools(\"filesystem.*\")\nfor tool in fs_tools:\n    print(f\"- {tool.name}: {tool.description}\")\n</code></pre>"},{"location":"features/built-in-tools/#check-registered-tools","title":"Check Registered Tools","text":"<pre><code>agent = ReactAgent(name=\"Agent\")\nagent.use_tools(\"*\")\n\n# Get all registered tools\ntools = agent.get_tools()\n\n# Print tool names and descriptions\nfor name, description in tools.items():\n    print(f\"{name}:\")\n    print(f\"  {description}\\n\")\n</code></pre>"},{"location":"features/built-in-tools/#best-practices","title":"Best Practices","text":""},{"location":"features/built-in-tools/#1-register-only-needed-tools","title":"1. Register Only Needed Tools","text":"<pre><code># \u274c Bad: Register everything when you only need calculator\nagent.use_tools(\"*\")\n\n# \u2705 Good: Register only what you need\nagent.use_tools(\"computation.calculator\")\n</code></pre>"},{"location":"features/built-in-tools/#2-use-appropriate-temperature","title":"2. Use Appropriate Temperature","text":"<pre><code># For deterministic tasks (math, file operations)\nagent = ReactAgent(\n    name=\"Calculator\",\n    temperature=0  # No randomness\n)\n\n# For creative tasks (research, writing)\nagent = ReactAgent(\n    name=\"Researcher\",\n    temperature=0.7  # More creative\n)\n</code></pre>"},{"location":"features/built-in-tools/#3-handle-errors-gracefully","title":"3. Handle Errors Gracefully","text":"<pre><code>agent = ReactAgent(name=\"File Agent\")\nagent.use_tools(\"filesystem.*\")\n\ntry:\n    answer = agent.run(\"Delete important_file.txt\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"features/built-in-tools/#4-use-verbose-mode-for-debugging","title":"4. Use Verbose Mode for Debugging","text":"<pre><code># See the agent's reasoning process\nanswer = agent.run(\n    \"Calculate 15 * 20\",\n    verbose=True  # Shows thought-action-observation\n)\n</code></pre>"},{"location":"features/built-in-tools/#tool-categories-reference","title":"Tool Categories Reference","text":"Category Tools Description search <code>duckduckgo</code> Web search with DuckDuckGo filesystem <code>read</code>, <code>write</code>, <code>list</code>, <code>delete</code> File and directory operations computation <code>calculator</code>, <code>code_executor</code>, <code>shell</code> Mathematical and code execution"},{"location":"features/built-in-tools/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Create Custom Tools</p> <p>Learn how to create your own tools</p> <p> Custom Tools Guide</p> </li> <li> <p> Add Memory</p> <p>Give your agent memory capabilities</p> <p> Memory Systems</p> </li> <li> <p> Use MCP Servers</p> <p>Connect to external tool servers</p> <p> MCP Integration</p> </li> </ul>"},{"location":"features/built-in-tools/#examples","title":"Examples","text":"<p>For complete, runnable examples, see:</p> <ul> <li>builtin_tools.py - All built-in tools demonstration</li> <li>Basic Usage - Getting started examples</li> <li>Web Research - Research agent example</li> </ul>"},{"location":"features/environments/","title":"Environments","text":"<p>Environments provide structured contexts for agents to interact with external systems. The framework includes three built-in environments: Web, CLI, and File - each designed for specific types of agent tasks.</p>"},{"location":"features/environments/#overview","title":"Overview","text":"<p>An environment defines:</p> <ul> <li>Actions: What the agent can do</li> <li>Observations: What the agent sees after each action</li> <li>State: The current status of the environment</li> </ul> <pre><code>graph LR\n    A[Agent] --&gt;|Action| B[Environment]\n    B --&gt;|Observation| A\n    B -.-&gt;|State| B</code></pre>"},{"location":"features/environments/#web-environment","title":"Web Environment","text":"<p>The <code>WebEnvironment</code> enables agents to interact with web pages through browser automation.</p>"},{"location":"features/environments/#basic-usage","title":"Basic Usage","text":"<pre><code>from react_agent_framework.core.environment import WebEnvironment, Action\n\n# Create web environment\nenv = WebEnvironment(\n    start_url=\"https://example.com\",\n    headless=True,  # Run without visible browser\n    browser_type=\"chromium\"  # chromium, firefox, or webkit\n)\n\n# Initialize environment\ninitial_obs = env.reset()\nprint(initial_obs.to_string())\n\n# Navigate to a page\naction = Action(\n    name=\"navigate\",\n    parameters={\"url\": \"https://python.org\"}\n)\nobs = env.step(action)\nprint(f\"Page title: {obs.data['title']}\")\n\n# Close when done\nenv.close()\n</code></pre>"},{"location":"features/environments/#available-actions","title":"Available Actions","text":""},{"location":"features/environments/#navigate","title":"Navigate","text":"<p>Navigate to a URL:</p> <pre><code>action = Action(\n    name=\"navigate\",\n    parameters={\"url\": \"https://github.com\"}\n)\nobs = env.step(action)\n# Returns: {url, title, content, status}\n</code></pre>"},{"location":"features/environments/#click","title":"Click","text":"<p>Click an element on the page:</p> <pre><code>action = Action(\n    name=\"click\",\n    parameters={\"selector\": \"button.login\"}\n)\nobs = env.step(action)\n# Returns: {action, selector, result}\n</code></pre>"},{"location":"features/environments/#type","title":"Type","text":"<p>Type text into an input field:</p> <pre><code>action = Action(\n    name=\"type\",\n    parameters={\n        \"selector\": \"input#search\",\n        \"text\": \"python programming\"\n    }\n)\nobs = env.step(action)\n# Returns: {action, selector, text, result}\n</code></pre>"},{"location":"features/environments/#scroll","title":"Scroll","text":"<p>Scroll the page:</p> <pre><code>action = Action(\n    name=\"scroll\",\n    parameters={\"direction\": \"down\"}  # or \"up\"\n)\nobs = env.step(action)\n# Returns: {action, direction, result}\n</code></pre>"},{"location":"features/environments/#extract","title":"Extract","text":"<p>Extract text from an element:</p> <pre><code>action = Action(\n    name=\"extract\",\n    parameters={\"selector\": \"div.content\"}\n)\nobs = env.step(action)\nprint(obs.data['text'])\n# Returns: {action, selector, text}\n</code></pre>"},{"location":"features/environments/#complete-example","title":"Complete Example","text":"<pre><code>from react_agent_framework.core.environment import WebEnvironment, Action\n\n# Web scraping agent\nwith WebEnvironment(start_url=\"https://news.ycombinator.com\") as env:\n    # Navigate to Hacker News\n    obs = env.reset()\n    print(f\"Loaded: {obs.data['title']}\")\n\n    # Extract top stories\n    action = Action(\n        name=\"extract\",\n        parameters={\"selector\": \".storylink\"}\n    )\n    obs = env.step(action)\n    print(f\"Top stories: {obs.data['text']}\")\n\n    # Get available actions\n    print(f\"Available actions: {env.get_available_actions()}\")\n    # Output: ['navigate', 'click', 'type', 'scroll', 'extract']\n</code></pre>"},{"location":"features/environments/#integration-with-reactagent","title":"Integration with ReactAgent","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.environment import WebEnvironment, Action\n\n# Create agent with web capabilities\nagent = ReactAgent(\n    name=\"Web Researcher\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Add web environment\nweb_env = WebEnvironment(start_url=\"about:blank\")\n\n@agent.tool()\ndef navigate_web(url: str) -&gt; str:\n    \"\"\"Navigate to a URL and extract content\"\"\"\n    action = Action(name=\"navigate\", parameters={\"url\": url})\n    obs = web_env.step(action)\n    return f\"Navigated to {obs.data['title']}: {obs.data['content'][:200]}\"\n\n@agent.tool()\ndef extract_text(selector: str) -&gt; str:\n    \"\"\"Extract text from page element\"\"\"\n    action = Action(name=\"extract\", parameters={\"selector\": selector})\n    obs = web_env.step(action)\n    return obs.data.get('text', 'No text found')\n\n# Use agent\nanswer = agent.run(\n    \"Go to python.org and extract the main heading\",\n    verbose=True\n)\n</code></pre> <p>Browser Automation</p> <p>For full browser automation, install Playwright or Selenium: <pre><code>pip install playwright\nplaywright install chromium\n</code></pre></p>"},{"location":"features/environments/#cli-environment","title":"CLI Environment","text":"<p>The <code>CLIEnvironment</code> allows agents to execute shell commands safely.</p>"},{"location":"features/environments/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from react_agent_framework.core.environment import CLIEnvironment, Action\n\n# Create CLI environment\nenv = CLIEnvironment(\n    working_directory=\"/tmp\",\n    safe_mode=True,  # Restrict to safe commands\n    timeout=30  # Command timeout in seconds\n)\n\n# Initialize\nobs = env.reset()\nprint(obs.data['directory'])\n\n# Execute command\naction = Action(\n    name=\"execute\",\n    parameters={\"command\": \"ls -la\"}\n)\nobs = env.step(action)\nprint(obs.data['stdout'])\n</code></pre>"},{"location":"features/environments/#available-actions_1","title":"Available Actions","text":""},{"location":"features/environments/#execute","title":"Execute","text":"<p>Run a shell command:</p> <pre><code>action = Action(\n    name=\"execute\",\n    parameters={\"command\": \"pwd\"}\n)\nobs = env.step(action)\nprint(f\"Output: {obs.data['stdout']}\")\nprint(f\"Exit code: {obs.data['exit_code']}\")\n# Returns: {command, stdout, stderr, exit_code, success}\n</code></pre>"},{"location":"features/environments/#change-directory","title":"Change Directory","text":"<pre><code>action = Action(\n    name=\"cd\",\n    parameters={\"directory\": \"src\"}\n)\nobs = env.step(action)\nprint(f\"New directory: {obs.data['directory']}\")\n# Returns: {action, directory, success}\n</code></pre>"},{"location":"features/environments/#print-working-directory","title":"Print Working Directory","text":"<pre><code>action = Action(name=\"pwd\", parameters={})\nobs = env.step(action)\nprint(obs.data['directory'])\n# Returns: {action, directory}\n</code></pre>"},{"location":"features/environments/#safe-mode","title":"Safe Mode","text":"<p>Safe mode restricts command execution:</p> <pre><code># Safe mode enabled (default)\nenv = CLIEnvironment(safe_mode=True)\n\n# Allowed commands: ls, pwd, echo, cat, grep, etc.\naction = Action(name=\"execute\", parameters={\"command\": \"ls\"})\nobs = env.step(action)  # \u2705 Works\n\n# Blocked commands: rm, sudo, chmod, etc.\naction = Action(name=\"execute\", parameters={\"command\": \"rm -rf /\"})\nobs = env.step(action)  # \u274c Blocked\nprint(obs.data['error'])  # \"Command blocked by safe mode\"\n</code></pre> <p>Safe commands whitelist: - <code>ls</code>, <code>pwd</code>, <code>echo</code>, <code>cat</code>, <code>head</code>, <code>tail</code> - <code>grep</code>, <code>find</code>, <code>wc</code>, <code>date</code>, <code>whoami</code> - <code>hostname</code>, <code>df</code>, <code>du</code>, <code>which</code>, <code>whereis</code></p> <p>Blocked commands: - <code>rm</code>, <code>rmdir</code>, <code>mv</code>, <code>chmod</code>, <code>chown</code> - <code>kill</code>, <code>sudo</code>, <code>su</code>, <code>shutdown</code>, <code>reboot</code></p>"},{"location":"features/environments/#complete-example_1","title":"Complete Example","text":"<pre><code>from react_agent_framework.core.environment import CLIEnvironment, Action\n\n# System admin agent\nwith CLIEnvironment(working_directory=\"/tmp\", safe_mode=True) as env:\n    # Check current directory\n    obs = env.reset()\n    print(f\"Working in: {obs.data['directory']}\")\n\n    # List files\n    action = Action(name=\"execute\", parameters={\"command\": \"ls -l\"})\n    obs = env.step(action)\n    print(f\"Files:\\n{obs.data['stdout']}\")\n\n    # Check disk usage\n    action = Action(name=\"execute\", parameters={\"command\": \"df -h\"})\n    obs = env.step(action)\n    print(f\"Disk usage:\\n{obs.data['stdout']}\")\n\n    # Get environment status\n    status = env.get_status()\n    print(f\"Steps executed: {status['steps']}\")\n</code></pre>"},{"location":"features/environments/#integration-with-reactagent_1","title":"Integration with ReactAgent","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.environment import CLIEnvironment, Action\n\nagent = ReactAgent(name=\"DevOps Assistant\", provider=\"gpt-4o-mini\")\n\ncli_env = CLIEnvironment(safe_mode=True)\n\n@agent.tool()\ndef run_command(command: str) -&gt; str:\n    \"\"\"Execute a safe shell command\"\"\"\n    action = Action(name=\"execute\", parameters={\"command\": command})\n    obs = cli_env.step(action)\n\n    if obs.data.get('success'):\n        return obs.data['stdout']\n    else:\n        return f\"Error: {obs.data.get('error', obs.data.get('stderr'))}\"\n\n@agent.tool()\ndef check_directory() -&gt; str:\n    \"\"\"Check current working directory\"\"\"\n    action = Action(name=\"pwd\", parameters={})\n    obs = cli_env.step(action)\n    return obs.data['directory']\n\n# Use agent\nanswer = agent.run(\n    \"List all Python files in the current directory\",\n    verbose=True\n)\n</code></pre>"},{"location":"features/environments/#file-environment","title":"File Environment","text":"<p>The <code>FileEnvironment</code> enables agents to navigate and manipulate the file system.</p>"},{"location":"features/environments/#basic-usage_2","title":"Basic Usage","text":"<pre><code>from react_agent_framework.core.environment import FileEnvironment, Action\n\n# Create file environment\nenv = FileEnvironment(\n    root_directory=\"./data\",\n    safe_mode=True,  # Protect sensitive files\n    max_file_size=10 * 1024 * 1024  # 10MB limit\n)\n\n# Initialize\nobs = env.reset()\nprint(f\"Files: {obs.data['contents']}\")\n\n# Read a file\naction = Action(\n    name=\"read\",\n    parameters={\"filepath\": \"example.txt\"}\n)\nobs = env.step(action)\nprint(obs.data['content'])\n</code></pre>"},{"location":"features/environments/#available-actions_2","title":"Available Actions","text":""},{"location":"features/environments/#list-directory","title":"List Directory","text":"<pre><code>action = Action(\n    name=\"list\",\n    parameters={\"path\": \"./src\"}\n)\nobs = env.step(action)\nfor item in obs.data['contents']:\n    print(f\"{item['type']}: {item['name']} ({item.get('size', 'N/A')} bytes)\")\n# Returns: {action, path, contents[], count}\n</code></pre>"},{"location":"features/environments/#read-file","title":"Read File","text":"<pre><code>action = Action(\n    name=\"read\",\n    parameters={\"filepath\": \"config.json\"}\n)\nobs = env.step(action)\nprint(obs.data['content'])\n# Returns: {action, filepath, content, size}\n</code></pre>"},{"location":"features/environments/#write-file","title":"Write File","text":"<pre><code>action = Action(\n    name=\"write\",\n    parameters={\n        \"filepath\": \"output.txt\",\n        \"content\": \"Hello, World!\"\n    }\n)\nobs = env.step(action)\nprint(f\"Written {obs.data['bytes_written']} bytes\")\n# Returns: {action, filepath, bytes_written, success}\n</code></pre>"},{"location":"features/environments/#create-directory","title":"Create Directory","text":"<pre><code>action = Action(\n    name=\"create_dir\",\n    parameters={\"dirname\": \"new_folder\"}\n)\nobs = env.step(action)\n# Returns: {action, path, success}\n</code></pre>"},{"location":"features/environments/#navigate_1","title":"Navigate","text":"<pre><code>action = Action(\n    name=\"navigate\",\n    parameters={\"path\": \"./src\"}\n)\nobs = env.step(action)\nprint(f\"Now in: {obs.data['directory']}\")\n# Returns: {action, directory, contents[]}\n</code></pre>"},{"location":"features/environments/#search","title":"Search","text":"<p>Search for files matching a pattern:</p> <pre><code>action = Action(\n    name=\"search\",\n    parameters={\"pattern\": \"*.py\"}\n)\nobs = env.step(action)\nprint(f\"Found {obs.data['count']} Python files:\")\nfor match in obs.data['matches']:\n    print(f\"  - {match}\")\n# Returns: {action, pattern, matches[], count}\n</code></pre>"},{"location":"features/environments/#safe-mode_1","title":"Safe Mode","text":"<p>Protects sensitive files from being read or modified:</p> <pre><code>env = FileEnvironment(safe_mode=True)\n\n# Sensitive patterns blocked:\n# .ssh, .env, password, secret, credential, .key, token, id_rsa\n\n# Try to read sensitive file\naction = Action(name=\"read\", parameters={\"filepath\": \".env\"})\nobs = env.step(action)\nprint(obs.data['error'])  # \"Access denied: Sensitive file\"\n</code></pre>"},{"location":"features/environments/#complete-example_2","title":"Complete Example","text":"<pre><code>from react_agent_framework.core.environment import FileEnvironment, Action\n\n# File manager agent\nwith FileEnvironment(root_directory=\"./project\") as env:\n    # Initialize and list files\n    obs = env.reset()\n    print(f\"Project files: {len(obs.data['contents'])} items\")\n\n    # Search for Python files\n    action = Action(name=\"search\", parameters={\"pattern\": \"*.py\"})\n    obs = env.step(action)\n    print(f\"Found {obs.data['count']} Python files\")\n\n    # Read a specific file\n    action = Action(name=\"read\", parameters={\"filepath\": \"main.py\"})\n    obs = env.step(action)\n    print(f\"File size: {obs.data['size']} bytes\")\n\n    # Create a report\n    report = f\"Project analysis:\\n{len(obs.data['content'])} lines of code\"\n    action = Action(\n        name=\"write\",\n        parameters={\"filepath\": \"report.txt\", \"content\": report}\n    )\n    obs = env.step(action)\n    print(f\"Report saved ({obs.data['bytes_written']} bytes)\")\n</code></pre>"},{"location":"features/environments/#integration-with-reactagent_2","title":"Integration with ReactAgent","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.environment import FileEnvironment, Action\n\nagent = ReactAgent(name=\"File Assistant\", provider=\"gpt-4o-mini\")\n\nfile_env = FileEnvironment(root_directory=\"./data\", safe_mode=True)\n\n@agent.tool()\ndef list_files(directory: str = \".\") -&gt; str:\n    \"\"\"List files in a directory\"\"\"\n    action = Action(name=\"list\", parameters={\"path\": directory})\n    obs = file_env.step(action)\n\n    if 'error' in obs.data:\n        return obs.data['error']\n\n    files = [f\"{item['name']} ({item['type']})\" for item in obs.data['contents']]\n    return f\"Found {len(files)} items:\\n\" + \"\\n\".join(files)\n\n@agent.tool()\ndef read_file(filepath: str) -&gt; str:\n    \"\"\"Read contents of a file\"\"\"\n    action = Action(name=\"read\", parameters={\"filepath\": filepath})\n    obs = file_env.step(action)\n\n    if 'error' in obs.data:\n        return f\"Error: {obs.data['error']}\"\n\n    return obs.data['content']\n\n@agent.tool()\ndef search_files(pattern: str) -&gt; str:\n    \"\"\"Search for files matching pattern\"\"\"\n    action = Action(name=\"search\", parameters={\"pattern\": pattern})\n    obs = file_env.step(action)\n\n    matches = obs.data['matches']\n    return f\"Found {len(matches)} files:\\n\" + \"\\n\".join(matches)\n\n# Use agent\nanswer = agent.run(\n    \"Find all JSON files and read the first one you find\",\n    verbose=True\n)\n</code></pre>"},{"location":"features/environments/#environment-state","title":"Environment State","text":"<p>All environments track their state:</p> <pre><code>from react_agent_framework.core.environment import FileEnvironment, Action\n\nenv = FileEnvironment()\nenv.reset()\n\n# Perform several actions\nenv.step(Action(name=\"list\", parameters={}))\nenv.step(Action(name=\"read\", parameters={\"filepath\": \"test.txt\"}))\nenv.step(Action(name=\"search\", parameters={\"pattern\": \"*.md\"}))\n\n# Get state\nstate = env.get_state()\nprint(f\"Steps taken: {state.step_count}\")\nprint(f\"Action history: {len(state.action_history)}\")\nprint(f\"Current observation: {state.current_observation}\")\n\n# Get recent history\nhistory = env.get_history(n=5)  # Last 5 steps\nfor action, obs in history:\n    print(f\"Action: {action.name} -&gt; Observation: {obs.to_string()[:50]}\")\n</code></pre>"},{"location":"features/environments/#context-manager-support","title":"Context Manager Support","text":"<p>All environments support context managers for automatic cleanup:</p> <pre><code># Automatic initialization and cleanup\nwith WebEnvironment() as web_env:\n    obs = web_env.step(Action(name=\"navigate\", parameters={\"url\": \"https://python.org\"}))\n    # Environment automatically closed when done\n\nwith CLIEnvironment() as cli_env:\n    obs = cli_env.step(Action(name=\"execute\", parameters={\"command\": \"ls\"}))\n    # Environment automatically closed\n\nwith FileEnvironment() as file_env:\n    obs = file_env.step(Action(name=\"list\", parameters={}))\n    # Environment automatically closed\n</code></pre>"},{"location":"features/environments/#creating-custom-environments","title":"Creating Custom Environments","text":"<p>Extend <code>BaseEnvironment</code> to create custom environments:</p> <pre><code>from react_agent_framework.core.environment import BaseEnvironment, Action, Observation\nfrom typing import List, Dict, Any\n\nclass DatabaseEnvironment(BaseEnvironment):\n    \"\"\"Custom environment for database interactions\"\"\"\n\n    def __init__(self, connection_string: str):\n        super().__init__(name=\"DatabaseEnvironment\")\n        self.connection_string = connection_string\n        self.connection = None\n\n    def reset(self) -&gt; Observation:\n        \"\"\"Initialize database connection\"\"\"\n        # Connect to database\n        self.connection = self._connect()\n\n        obs = Observation(\n            data={\"status\": \"connected\", \"database\": \"mydb\"}\n        )\n        self.state.current_observation = obs\n        return obs\n\n    def step(self, action: Action) -&gt; Observation:\n        \"\"\"Execute database action\"\"\"\n        if action.name == \"query\":\n            sql = action.parameters.get(\"sql\", \"\")\n            results = self._execute_query(sql)\n            return Observation(data={\"results\": results})\n\n        elif action.name == \"insert\":\n            table = action.parameters.get(\"table\", \"\")\n            data = action.parameters.get(\"data\", {})\n            success = self._insert_data(table, data)\n            return Observation(data={\"success\": success})\n\n        return Observation(data={\"error\": \"Unknown action\"})\n\n    def get_available_actions(self) -&gt; List[str]:\n        return [\"query\", \"insert\", \"update\", \"delete\"]\n\n    def get_observation_space(self) -&gt; Dict[str, Any]:\n        return {\n            \"results\": \"Query results\",\n            \"affected_rows\": \"Number of rows affected\",\n            \"success\": \"Operation success status\"\n        }\n\n    def _connect(self):\n        # Database connection logic\n        pass\n\n    def _execute_query(self, sql: str):\n        # Query execution logic\n        pass\n\n    def _insert_data(self, table: str, data: dict):\n        # Insert logic\n        pass\n\n    def close(self):\n        \"\"\"Cleanup database connection\"\"\"\n        if self.connection:\n            self.connection.close()\n</code></pre>"},{"location":"features/environments/#best-practices","title":"Best Practices","text":""},{"location":"features/environments/#1-always-use-context-managers","title":"1. Always Use Context Managers","text":"<pre><code># \u2705 Good: Automatic cleanup\nwith FileEnvironment() as env:\n    obs = env.step(action)\n\n# \u274c Bad: Manual cleanup required\nenv = FileEnvironment()\nobs = env.step(action)\nenv.close()  # Easy to forget!\n</code></pre>"},{"location":"features/environments/#2-enable-safe-mode-for-production","title":"2. Enable Safe Mode for Production","text":"<pre><code># \u2705 Good: Safe mode enabled\ncli_env = CLIEnvironment(safe_mode=True)\nfile_env = FileEnvironment(safe_mode=True)\n\n# \u274c Bad: Safe mode disabled (only for testing)\ncli_env = CLIEnvironment(safe_mode=False)\n</code></pre>"},{"location":"features/environments/#3-set-appropriate-timeouts","title":"3. Set Appropriate Timeouts","text":"<pre><code># \u2705 Good: Reasonable timeout\ncli_env = CLIEnvironment(timeout=30)\n\n# \u274c Bad: No timeout or too long\ncli_env = CLIEnvironment(timeout=300)  # 5 minutes is too long\n</code></pre>"},{"location":"features/environments/#4-handle-errors-gracefully","title":"4. Handle Errors Gracefully","text":"<pre><code># \u2705 Good: Check for errors\nobs = env.step(action)\nif obs.metadata.get('error'):\n    print(f\"Error: {obs.data.get('error')}\")\nelse:\n    print(f\"Success: {obs.data}\")\n\n# \u274c Bad: Assume success\nobs = env.step(action)\nprint(obs.data['content'])  # May not exist if error\n</code></pre>"},{"location":"features/environments/#5-limit-file-sizes","title":"5. Limit File Sizes","text":"<pre><code># \u2705 Good: Set reasonable limits\nfile_env = FileEnvironment(max_file_size=10 * 1024 * 1024)  # 10MB\n\n# \u274c Bad: No limit\nfile_env = FileEnvironment(max_file_size=float('inf'))\n</code></pre>"},{"location":"features/environments/#comparison","title":"Comparison","text":"Environment Best For Safety Features Network Required Web Browser automation, web scraping Headless mode Yes CLI System administration, DevOps Safe mode, command whitelist No File File management, data processing Safe mode, size limits No"},{"location":"features/environments/#next-steps","title":"Next Steps","text":"<ul> <li>Built-in Tools - Learn about tool integration</li> <li>Custom Tools - Create tools for environments</li> <li>Reasoning Strategies - Optimize agent behavior</li> <li>Memory Systems - Add persistent context</li> </ul>"},{"location":"features/environments/#further-reading","title":"Further Reading","text":"<ul> <li>Gymnasium - RL environment standard</li> <li>OpenAI Gym - Classic environment framework</li> <li>Playwright - Browser automation</li> </ul>"},{"location":"features/mcp-integration/","title":"MCP Integration","text":"<p>Connect your agents to Model Context Protocol (MCP) servers to access external tools dynamically.</p>"},{"location":"features/mcp-integration/#what-is-mcp","title":"What is MCP?","text":"<p>Model Context Protocol (MCP) is Anthropic's open standard for connecting AI assistants to data sources and tools.</p>"},{"location":"features/mcp-integration/#benefits","title":"Benefits","text":"<ul> <li> Connect to external tool servers</li> <li> Auto-discover available tools</li> <li> Secure tool execution</li> <li> Works with any MCP-compatible server</li> </ul>"},{"location":"features/mcp-integration/#installation","title":"Installation","text":"<pre><code>pip install react-agent-framework[mcp]\n</code></pre>"},{"location":"features/mcp-integration/#basic-usage","title":"Basic Usage","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(name=\"MCP Agent\")\n\n# Connect to filesystem MCP server\nserver_id = agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"],\n    name=\"filesystem\"\n)\n\n# All tools from the server are now available!\nanswer = agent.run(\"List files in the /tmp directory\")\n</code></pre>"},{"location":"features/mcp-integration/#popular-mcp-servers","title":"Popular MCP Servers","text":""},{"location":"features/mcp-integration/#filesystem-server","title":"Filesystem Server","text":"<p>Access local files and directories:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/dir\"],\n    name=\"filesystem\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#github-server","title":"GitHub Server","text":"<p>Interact with GitHub repositories:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-github\"],\n    env={\"GITHUB_TOKEN\": \"ghp_your_token\"},\n    name=\"github\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#postgresql-server","title":"PostgreSQL Server","text":"<p>Query databases:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-postgres\"],\n    env={\"POSTGRES_CONNECTION_STRING\": \"postgresql://...\"},\n    name=\"postgres\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#puppeteer-server","title":"Puppeteer Server","text":"<p>Browser automation:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-puppeteer\"],\n    name=\"puppeteer\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#managing-servers","title":"Managing Servers","text":""},{"location":"features/mcp-integration/#list-connected-servers","title":"List Connected Servers","text":"<pre><code>servers = agent.list_mcp_servers()\nfor server in servers:\n    print(f\"{server['name']}: {server['num_tools']} tools\")\n</code></pre>"},{"location":"features/mcp-integration/#list-available-tools","title":"List Available Tools","text":"<pre><code>tools = agent.list_mcp_tools()\nfor tool_desc in tools:\n    print(tool_desc)\n</code></pre>"},{"location":"features/mcp-integration/#disconnect-from-server","title":"Disconnect from Server","text":"<pre><code>agent.disconnect_mcp_server(server_id)\n</code></pre>"},{"location":"features/mcp-integration/#using-config-files","title":"Using Config Files","text":"<p>Create <code>mcp_config.json</code>:</p> <pre><code>{\n  \"servers\": [\n    {\n      \"name\": \"filesystem\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"],\n      \"auto_connect\": true\n    },\n    {\n      \"name\": \"github\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"ghp_...\"\n      },\n      \"auto_connect\": false\n    }\n  ]\n}\n</code></pre> <p>Load config:</p> <pre><code>from react_agent_framework.mcp.config import MCPConfigManager\n\nconfig_manager = MCPConfigManager(\"mcp_config.json\")\n\nfor server_name in config_manager.list_servers():\n    server_config = config_manager.get_server(server_name)\n    agent.add_mcp_server(\n        command=server_config.command,\n        args=server_config.args,\n        env=server_config.env,\n        name=server_config.name\n    )\n</code></pre>"},{"location":"features/mcp-integration/#complete-example","title":"Complete Example","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(\n    name=\"Multi-Source Agent\",\n    description=\"Agent with access to multiple data sources\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Connect to filesystem\nfs_server = agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"],\n    name=\"filesystem\"\n)\n\n# Connect to GitHub (if token available)\ntry:\n    gh_server = agent.add_mcp_server(\n        command=\"npx\",\n        args=[\"-y\", \"@modelcontextprotocol/server-github\"],\n        env={\"GITHUB_TOKEN\": \"ghp_...\"},\n        name=\"github\"\n    )\nexcept:\n    print(\"GitHub server not configured\")\n\n# List all available tools\nprint(\"\\nAvailable MCP Tools:\")\nfor tool in agent.list_mcp_tools():\n    print(f\"  - {tool}\")\n\n# Use the agent\ntasks = [\n    \"List all Python files in current directory\",\n    \"Read the contents of README.md\",\n]\n\nfor task in tasks:\n    print(f\"\\nTask: {task}\")\n    result = agent.run(task)\n    print(f\"Result: {result}\")\n\n# Cleanup\nagent.disconnect_mcp_server(fs_server)\n</code></pre>"},{"location":"features/mcp-integration/#creating-custom-mcp-servers","title":"Creating Custom MCP Servers","text":"<p>You can create your own MCP servers. See the MCP Python SDK documentation for details.</p> <p>Example custom server:</p> <pre><code>from mcp import Server, Tool\n\nserver = Server(\"my-custom-server\")\n\n@server.tool()\nasync def my_custom_tool(param: str) -&gt; str:\n    \"\"\"My custom tool\"\"\"\n    return f\"Processed: {param}\"\n\nif __name__ == \"__main__\":\n    server.run()\n</code></pre> <p>Use it:</p> <pre><code>agent.add_mcp_server(\n    command=\"python\",\n    args=[\"my_custom_server.py\"],\n    name=\"custom\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see:</p> <ul> <li>MCP Client Reference</li> <li>ReactAgent MCP Methods</li> </ul>"},{"location":"features/mcp-integration/#learn-more","title":"Learn More","text":"<ul> <li>Official MCP Documentation</li> <li>MCP Python SDK</li> <li>Available MCP Servers</li> </ul>"},{"location":"features/memory-systems/","title":"Memory Systems","text":"<p>Give your agents the ability to remember conversations and retrieve relevant knowledge.</p>"},{"location":"features/memory-systems/#overview","title":"Overview","text":"<p>Since v0.10.0, the memory system has been refactored into two specialized types:</p> <p>Chat Memory: Sequential conversation history for maintaining dialogue context Knowledge Memory: Semantic knowledge retrieval (RAG) for storing and searching facts using vector similarity</p>"},{"location":"features/memory-systems/#quick-start","title":"Quick Start","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory.chat import SQLiteChatMemory\nfrom react_agent_framework.core.memory.knowledge import ChromaKnowledgeMemory\n\nagent = ReactAgent(\n    name=\"Smart Assistant\",\n    chat_memory=SQLiteChatMemory(\"./chat.db\"),\n    knowledge_memory=ChromaKnowledgeMemory(\"./knowledge\")\n)\n</code></pre> <p>See complete documentation for details.</p>"},{"location":"features/multi-provider/","title":"Multi-Provider Support","text":"<p>ReAct Agent Framework supports multiple AI providers, allowing you to switch between OpenAI, Anthropic, Google, and Ollama seamlessly.</p>"},{"location":"features/multi-provider/#supported-providers","title":"Supported Providers","text":""},{"location":"features/multi-provider/#openai-default","title":"OpenAI (Default)","text":"<pre><code>agent = ReactAgent(provider=\"gpt-4o-mini\")\nagent = ReactAgent(provider=\"gpt-4\")\n</code></pre>"},{"location":"features/multi-provider/#anthropic-claude","title":"Anthropic Claude","text":"<pre><code>agent = ReactAgent(provider=\"anthropic://claude-3-5-sonnet-20241022\")\nagent = ReactAgent(provider=\"anthropic://claude-3-opus-20240229\")\n</code></pre>"},{"location":"features/multi-provider/#google-gemini","title":"Google Gemini","text":"<pre><code>agent = ReactAgent(provider=\"google://gemini-1.5-flash\")\nagent = ReactAgent(provider=\"google://gemini-1.5-pro\")\n</code></pre>"},{"location":"features/multi-provider/#ollama-local","title":"Ollama (Local)","text":"<pre><code>agent = ReactAgent(provider=\"ollama://llama3.2\")\nagent = ReactAgent(provider=\"ollama://mistral\")\n</code></pre>"},{"location":"features/multi-provider/#configuration","title":"Configuration","text":"<p>Set API keys in <code>.env</code>:</p> <pre><code>OPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-ant-...\nGOOGLE_API_KEY=AI...\n</code></pre>"},{"location":"features/multi-provider/#learn-more","title":"Learn More","text":"<p>See API Reference for details.</p>"},{"location":"features/objectives/","title":"Objectives System","text":"<p>Create goal-oriented agents that track and pursue objectives systematically.</p>"},{"location":"features/objectives/#overview","title":"Overview","text":"<p>The Objectives system allows agents to:</p> <ul> <li>\ud83c\udfaf Track goals with priorities and deadlines</li> <li>\ud83d\udcca Monitor progress toward completion</li> <li>\u2705 Define success criteria for each objective</li> <li>\ud83d\udd04 Manage multiple objectives simultaneously</li> </ul> <pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.objectives import Objective\n\n# Create agent with objectives\nagent = ReactAgent(\n    name=\"Goal-Oriented Assistant\",\n    objectives=[\n        Objective(\n            goal=\"Research Python frameworks\",\n            priority=\"high\",\n            success_criteria=[\"Find 3+ frameworks\", \"Compare features\"]\n        )\n    ]\n)\n</code></pre>"},{"location":"features/objectives/#creating-objectives","title":"Creating Objectives","text":""},{"location":"features/objectives/#basic-objective","title":"Basic Objective","text":"<pre><code>from react_agent_framework.core.objectives import Objective\n\nobjective = Objective(\n    goal=\"Complete the project documentation\",\n    priority=\"high\"\n)\n</code></pre>"},{"location":"features/objectives/#complete-objective","title":"Complete Objective","text":"<pre><code>from datetime import datetime, timedelta\n\nobjective = Objective(\n    goal=\"Deploy application to production\",\n    description=\"Deploy the web application with all features\",\n    priority=\"critical\",\n    success_criteria=[\n        \"All tests pass\",\n        \"Documentation is complete\",\n        \"Deployment successful\"\n    ],\n    deadline=datetime.now() + timedelta(days=7),\n    metadata={\"project\": \"webapp\", \"team\": \"backend\"}\n)\n</code></pre>"},{"location":"features/objectives/#priority-levels","title":"Priority Levels","text":"<p>Objectives support 4 priority levels:</p> <pre><code>from react_agent_framework.core.objectives import Priority\n\n# Available priorities\nPriority.LOW       # Nice to have\nPriority.MEDIUM    # Important\nPriority.HIGH      # Very important\nPriority.CRITICAL  # Must do immediately\n</code></pre> <p>Example:</p> <pre><code># Using string (converted automatically)\nobj1 = Objective(goal=\"Task 1\", priority=\"low\")\nobj2 = Objective(goal=\"Task 2\", priority=\"high\")\n\n# Using enum directly\nfrom react_agent_framework.core.objectives import Priority\n\nobj3 = Objective(goal=\"Task 3\", priority=Priority.CRITICAL)\n</code></pre>"},{"location":"features/objectives/#objective-tracker","title":"Objective Tracker","text":"<p>Manage multiple objectives with <code>ObjectiveTracker</code>:</p>"},{"location":"features/objectives/#basic-usage","title":"Basic Usage","text":"<pre><code>from react_agent_framework.core.objectives import Objective, ObjectiveTracker\n\n# Create tracker\ntracker = ObjectiveTracker()\n\n# Add objectives\ntracker.add(Objective(\n    goal=\"Research AI frameworks\",\n    priority=\"high\"\n))\n\ntracker.add(Objective(\n    goal=\"Write documentation\",\n    priority=\"medium\"\n))\n\ntracker.add(Objective(\n    goal=\"Deploy to production\",\n    priority=\"critical\"\n))\n\n# Get summary\nprint(tracker.get_summary())\n</code></pre> <p>Output: <pre><code>\ud83d\udccb OBJECTIVES SUMMARY\n====================\n\n\ud83d\udd25 CRITICAL: 1\n\u2b06\ufe0f  HIGH: 1\n\u27a1\ufe0f  MEDIUM: 1\n\u2b07\ufe0f  LOW: 0\n\nTotal: 3 objectives\nActive: 0 | Pending: 3 | Completed: 0 | Failed: 0\n</code></pre></p>"},{"location":"features/objectives/#working-with-objectives","title":"Working with Objectives","text":""},{"location":"features/objectives/#start-next-objective","title":"Start Next Objective","text":"<p>Automatically starts the highest priority pending objective:</p> <pre><code>tracker = ObjectiveTracker()\n\n# Add objectives\ntracker.add(Objective(goal=\"Task 1\", priority=\"low\"))\ntracker.add(Objective(goal=\"Task 2\", priority=\"critical\"))\ntracker.add(Objective(goal=\"Task 3\", priority=\"high\"))\n\n# Start next (will pick \"Task 2\" - critical priority)\nnext_obj = tracker.start_next()\nprint(f\"Started: {next_obj.goal}\")\n</code></pre>"},{"location":"features/objectives/#update-progress","title":"Update Progress","text":"<pre><code># Update progress (0.0 to 1.0)\ntracker.update_progress(\n    objective_id=next_obj.id,\n    progress=0.5,\n    notes=\"Halfway done\"\n)\n\nprint(f\"Progress: {next_obj.progress:.0%}\")  # \"50%\"\n</code></pre>"},{"location":"features/objectives/#complete-objective_1","title":"Complete Objective","text":"<pre><code># Mark as completed\ntracker.complete(\n    objective_id=next_obj.id,\n    notes=\"All tasks finished successfully\"\n)\n</code></pre>"},{"location":"features/objectives/#fail-objective","title":"Fail Objective","text":"<pre><code># Mark as failed\ntracker.fail(\n    objective_id=next_obj.id,\n    notes=\"Blocked by external dependency\"\n)\n</code></pre>"},{"location":"features/objectives/#agent-integration","title":"Agent Integration","text":""},{"location":"features/objectives/#create-agent-with-objectives","title":"Create Agent with Objectives","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.objectives import Objective\n\n# Define objectives\nobjectives = [\n    Objective(\n        goal=\"Calculate total revenue\",\n        priority=\"high\",\n        success_criteria=[\"Get all sales data\", \"Sum totals\"]\n    ),\n    Objective(\n        goal=\"Generate report\",\n        priority=\"medium\",\n        success_criteria=[\"Create PDF\", \"Send via email\"]\n    )\n]\n\n# Create agent\nagent = ReactAgent(\n    name=\"Business Assistant\",\n    provider=\"gpt-4o-mini\",\n    objectives=objectives\n)\n\n# Agent is aware of its objectives\nanswer = agent.run(\"What are my current goals?\")\n</code></pre>"},{"location":"features/objectives/#access-objectives","title":"Access Objectives","text":"<pre><code># Get all objectives\nall_objectives = agent.objectives.get_all()\n\n# Get by status\nactive = agent.objectives.get_active()\npending = agent.objectives.get_pending()\ncompleted = agent.objectives.get_completed()\n\n# Get by priority\ncritical = agent.objectives.get_by_priority(\"critical\")\n</code></pre>"},{"location":"features/objectives/#complete-example","title":"Complete Example","text":"<p>Goal-oriented agent that tracks progress:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.objectives import Objective\n\n# Create objectives\nobjectives = [\n    Objective(\n        goal=\"Calculate quarterly revenue\",\n        priority=\"critical\",\n        success_criteria=[\n            \"Get Q1 sales: $50K\",\n            \"Get Q2 sales: $60K\",\n            \"Get Q3 sales: $55K\",\n            \"Get Q4 sales: $65K\",\n            \"Sum total\"\n        ]\n    ),\n    Objective(\n        goal=\"Analyze growth rate\",\n        priority=\"high\",\n        success_criteria=[\"Calculate YoY growth\"]\n    )\n]\n\n# Create agent\nagent = ReactAgent(\n    name=\"Financial Analyst\",\n    provider=\"gpt-4o-mini\",\n    objectives=objectives\n)\n\n# Add calculator tool\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform calculations\"\"\"\n    try:\n        result = eval(expression, {\"__builtins__\": {}}, {})\n        return f\"Result: {result}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Agent works on objectives\nprint(\"\ud83d\udccb Initial Objectives:\")\nprint(agent.objectives.get_summary())\n\n# Run agent - it knows its goals\nanswer = agent.run(\"Calculate the total quarterly revenue\", verbose=True)\n\nprint(f\"\\n\u2705 Answer: {answer}\")\n\n# Check progress\nprint(\"\\n\ud83d\udcca Updated Objectives:\")\nprint(agent.objectives.get_summary())\n</code></pre>"},{"location":"features/objectives/#objective-properties","title":"Objective Properties","text":"Property Type Description <code>id</code> str Unique identifier (auto-generated) <code>goal</code> str What to achieve <code>description</code> str Detailed explanation (optional) <code>priority</code> Priority Importance level <code>status</code> str pending/active/completed/failed <code>progress</code> float 0.0 to 1.0 <code>success_criteria</code> list List of criteria to meet <code>deadline</code> datetime When to complete by (optional) <code>created_at</code> datetime When created <code>started_at</code> datetime When started <code>completed_at</code> datetime When completed <code>metadata</code> dict Additional data (optional)"},{"location":"features/objectives/#best-practices","title":"Best Practices","text":""},{"location":"features/objectives/#1-clear-actionable-goals","title":"1. Clear, Actionable Goals","text":"<pre><code># \u2705 Good - specific and actionable\nObjective(goal=\"Write unit tests for authentication module\")\n\n# \u274c Bad - vague\nObjective(goal=\"Improve code quality\")\n</code></pre>"},{"location":"features/objectives/#2-define-success-criteria","title":"2. Define Success Criteria","text":"<pre><code># \u2705 Good - measurable criteria\nObjective(\n    goal=\"Optimize database queries\",\n    success_criteria=[\n        \"Reduce query time by 50%\",\n        \"Add indexes to slow queries\",\n        \"Benchmark results\"\n    ]\n)\n\n# \u274c Bad - no criteria\nObjective(goal=\"Optimize database\")\n</code></pre>"},{"location":"features/objectives/#3-set-appropriate-priorities","title":"3. Set Appropriate Priorities","text":"<pre><code># Critical - system is down, blocking users\nObjective(goal=\"Fix production bug\", priority=\"critical\")\n\n# High - important feature\nObjective(goal=\"Add user authentication\", priority=\"high\")\n\n# Medium - enhancement\nObjective(goal=\"Improve UI design\", priority=\"medium\")\n\n# Low - nice to have\nObjective(goal=\"Add dark mode\", priority=\"low\")\n</code></pre>"},{"location":"features/objectives/#4-use-deadlines-for-time-sensitive-tasks","title":"4. Use Deadlines for Time-Sensitive Tasks","text":"<pre><code>from datetime import datetime, timedelta\n\nObjective(\n    goal=\"Prepare quarterly report\",\n    priority=\"high\",\n    deadline=datetime.now() + timedelta(days=7)\n)\n</code></pre>"},{"location":"features/objectives/#5-track-progress","title":"5. Track Progress","text":"<pre><code># Update progress as work is done\ntracker.update_progress(obj.id, 0.25, \"Database design complete\")\ntracker.update_progress(obj.id, 0.50, \"API endpoints implemented\")\ntracker.update_progress(obj.id, 0.75, \"Testing in progress\")\ntracker.update_progress(obj.id, 1.0, \"Deployment successful\")\n</code></pre>"},{"location":"features/objectives/#objective-states","title":"Objective States","text":"<pre><code>graph LR\n    A[Pending] --&gt;|start_next| B[Active]\n    B --&gt;|complete| C[Completed]\n    B --&gt;|fail| D[Failed]</code></pre> <ul> <li>Pending: Not started yet</li> <li>Active: Currently being worked on</li> <li>Completed: Successfully finished</li> <li>Failed: Could not be completed</li> </ul>"},{"location":"features/objectives/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Add Memory</p> <p>Combine objectives with memory for context</p> <p> Memory Systems</p> </li> <li> <p> Reasoning Strategies</p> <p>Use different reasoning approaches</p> <p> Reasoning Strategies</p> </li> <li> <p> API Reference</p> <p>Complete objectives API documentation</p> <p> Objectives API</p> </li> </ul>"},{"location":"features/objectives/#examples","title":"Examples","text":"<p>Complete runnable examples:</p> <ul> <li>objectives_demo.py - Full objectives system demonstration</li> <li>Advanced Examples - Complex multi-objective agents</li> </ul>"},{"location":"features/reasoning-strategies/","title":"Reasoning Strategies","text":"<p>The ReAct Agent Framework implements the ReAct (Reasoning + Acting) pattern, which combines reasoning and action in an iterative loop. This page explains how the pattern works and how to optimize agent reasoning.</p>"},{"location":"features/reasoning-strategies/#what-is-react","title":"What is ReAct?","text":"<p>ReAct is an agent reasoning pattern that alternates between three phases:</p> <ol> <li>Thought (Reasoning): The agent thinks about what to do next</li> <li>Action (Acting): The agent executes a tool/action</li> <li>Observation: The agent analyzes the result</li> </ol> <p>This cycle continues until the agent has enough information to provide a final answer.</p> <pre><code>graph LR\n    A[User Query] --&gt; B[Thought]\n    B --&gt; C[Action]\n    C --&gt; D[Observation]\n    D --&gt; B\n    D --&gt; E[Final Answer]</code></pre>"},{"location":"features/reasoning-strategies/#how-react-works","title":"How ReAct Works","text":""},{"location":"features/reasoning-strategies/#the-react-loop","title":"The ReAct Loop","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Research Assistant\",\n    provider=\"gpt-4o-mini\",\n    max_iterations=10  # Maximum reasoning cycles\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet\"\"\"\n    # Implementation\n    return results\n\n# The agent will follow this pattern:\nanswer = agent.run(\"What is the capital of France?\", verbose=True)\n</code></pre> <p>Output: <pre><code>Iteration 1:\nThought: I need to search for information about France's capital\nAction: search\nAction Input: capital of France\nObservation: Paris is the capital and largest city of France...\n\nIteration 2:\nThought: I have the answer, Paris is the capital of France\nAction: finish\nAction Input: Paris is the capital of France\n</code></pre></p>"},{"location":"features/reasoning-strategies/#iteration-control","title":"Iteration Control","text":"<p>You can control how many reasoning cycles the agent performs:</p> <pre><code># Conservative agent (fewer iterations)\nconservative_agent = ReactAgent(\n    name=\"Quick Assistant\",\n    max_iterations=5  # Will stop after 5 cycles\n)\n\n# Thorough agent (more iterations)\nthorough_agent = ReactAgent(\n    name=\"Deep Researcher\",\n    max_iterations=20  # Can reason for up to 20 cycles\n)\n\n# Unlimited iterations (use with caution!)\nunlimited_agent = ReactAgent(\n    name=\"Persistent Agent\",\n    max_iterations=100\n)\n</code></pre> <p>Iteration Limits</p> <p>Setting <code>max_iterations</code> too high can lead to:</p> <ul> <li>Higher API costs</li> <li>Longer execution time</li> <li>Potential infinite loops</li> </ul> <p>Start with 10 iterations and adjust based on your use case.</p>"},{"location":"features/reasoning-strategies/#reasoning-optimization","title":"Reasoning Optimization","text":""},{"location":"features/reasoning-strategies/#custom-instructions","title":"Custom Instructions","text":"<p>Guide agent reasoning with custom instructions:</p> <pre><code>agent = ReactAgent(\n    name=\"Data Analyst\",\n    provider=\"gpt-4o-mini\",\n    instructions=\"\"\"You are a data analyst. Follow these guidelines:\n\n    1. Always verify data before drawing conclusions\n    2. Use calculations to support your analysis\n    3. Provide specific numbers and percentages\n    4. If data is missing, use search to find it\n    5. Be concise but thorough in your answers\n    \"\"\"\n)\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform calculations\"\"\"\n    return str(eval(expression, {\"__builtins__\": {}}, {}))\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for data\"\"\"\n    # Implementation\n    return results\n\n# The agent will follow your guidelines\nanswer = agent.run(\n    \"What percentage of global GDP does the US represent?\",\n    verbose=True\n)\n</code></pre>"},{"location":"features/reasoning-strategies/#temperature-control","title":"Temperature Control","text":"<p>Temperature affects reasoning creativity:</p> <pre><code># Deterministic reasoning (recommended for most cases)\ndeterministic_agent = ReactAgent(\n    name=\"Precise Assistant\",\n    temperature=0  # Always picks most likely next token\n)\n\n# Balanced reasoning\nbalanced_agent = ReactAgent(\n    name=\"Balanced Assistant\",\n    temperature=0.3  # Slight creativity\n)\n\n# Creative reasoning\ncreative_agent = ReactAgent(\n    name=\"Creative Assistant\",\n    temperature=0.7  # More diverse responses\n)\n</code></pre> <p>Temperature Guidelines</p> <ul> <li>0.0: Deterministic, same output every time (best for factual tasks)</li> <li>0.1-0.3: Slightly varied, still consistent (good for most tasks)</li> <li>0.4-0.7: Creative, diverse outputs (good for brainstorming)</li> <li>0.8-1.0: Very creative, potentially inconsistent (use with caution)</li> </ul>"},{"location":"features/reasoning-strategies/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"features/reasoning-strategies/#multi-step-reasoning","title":"Multi-Step Reasoning","text":"<p>For complex tasks, the agent will chain multiple actions:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Research Analyst\",\n    provider=\"gpt-4o-mini\",\n    max_iterations=15,  # Allow more steps\n    instructions=\"\"\"Break down complex questions into steps:\n    1. Search for relevant information\n    2. Verify facts with multiple sources\n    3. Perform calculations if needed\n    4. Synthesize final answer\n    \"\"\"\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet\"\"\"\n    from duckduckgo_search import DDGS\n    with DDGS() as ddgs:\n        results = list(ddgs.text(query, max_results=3))\n    return \"\\n\".join([f\"{r['title']}: {r['body']}\" for r in results])\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform calculations\"\"\"\n    try:\n        result = eval(expression, {\"__builtins__\": {}}, {})\n        return f\"Result: {result}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Complex multi-step query\nanswer = agent.run(\n    \"Compare the populations of Tokyo and New York City. \"\n    \"Which is larger and by what percentage?\",\n    verbose=True\n)\n</code></pre> <p>Expected reasoning flow: <pre><code>Iteration 1:\nThought: I need to find Tokyo's population\nAction: search\nAction Input: Tokyo population 2024\n\nIteration 2:\nThought: Now I need New York City's population\nAction: search\nAction Input: New York City population 2024\n\nIteration 3:\nThought: I need to calculate the difference and percentage\nAction: calculate\nAction Input: ((37400000 - 8336000) / 8336000) * 100\n\nIteration 4:\nThought: I have all the information to answer\nAction: finish\nAction Input: Tokyo (37.4M) is larger than NYC (8.3M) by approximately 349%\n</code></pre></p>"},{"location":"features/reasoning-strategies/#objective-driven-reasoning","title":"Objective-Driven Reasoning","text":"<p>Combine ReAct with objectives for goal-oriented behavior:</p> <pre><code>from react_agent_framework import ReactAgent, Objective\n\n# Define objectives\nobjectives = [\n    Objective(\n        goal=\"Research company revenue\",\n        priority=\"critical\",\n        success_criteria=[\"Find Q1 revenue\", \"Find Q2 revenue\"]\n    ),\n    Objective(\n        goal=\"Calculate growth rate\",\n        priority=\"high\",\n        success_criteria=[\"Calculate percentage growth\"]\n    ),\n    Objective(\n        goal=\"Provide investment recommendation\",\n        priority=\"medium\",\n        success_criteria=[\"Analyze data\", \"Make recommendation\"]\n    )\n]\n\nagent = ReactAgent(\n    name=\"Financial Analyst\",\n    provider=\"gpt-4o-mini\",\n    objectives=objectives,  # Agent will work towards these goals\n    max_iterations=20,\n    instructions=\"Work through objectives systematically. Complete high-priority tasks first.\"\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for financial data\"\"\"\n    # Implementation\n    return results\n\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Perform financial calculations\"\"\"\n    return str(eval(expression, {\"__builtins__\": {}}, {}))\n\n# Agent will reason towards completing objectives\nanswer = agent.run(\n    \"Analyze Apple's financial performance this year and provide investment recommendation\",\n    verbose=True\n)\n\n# Check objective completion\nfor obj in agent.objective_tracker.objectives:\n    print(f\"{obj.goal}: {obj.status}\")\n</code></pre>"},{"location":"features/reasoning-strategies/#memory-enhanced-reasoning","title":"Memory-Enhanced Reasoning","text":"<p>Use memory to maintain context across multiple queries:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import ChromaMemory\n\n# Agent with persistent memory\nagent = ReactAgent(\n    name=\"Personal Assistant\",\n    provider=\"gpt-4o-mini\",\n    memory=ChromaMemory(\n        collection_name=\"personal_assistant\",\n        persist_directory=\"./chroma_db\"\n    ),\n    instructions=\"\"\"Use conversation history to provide context-aware responses.\n    Remember user preferences and previous interactions.\"\"\"\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet\"\"\"\n    # Implementation\n    return results\n\n# First conversation\nanswer1 = agent.run(\"I'm planning a trip to Japan in cherry blossom season\")\n# Memory stores: user interested in Japan, cherry blossoms\n\n# Later conversation (agent remembers context)\nanswer2 = agent.run(\"What's the weather like there in April?\")\n# Agent knows \"there\" = Japan, \"April\" = cherry blossom season\n\n# Even later\nanswer3 = agent.run(\"Find me good hotels\")\n# Agent knows to search for hotels in Japan during April\n</code></pre>"},{"location":"features/reasoning-strategies/#debugging-reasoning","title":"Debugging Reasoning","text":""},{"location":"features/reasoning-strategies/#verbose-mode","title":"Verbose Mode","text":"<p>Enable verbose mode to see agent's thought process:</p> <pre><code>agent = ReactAgent(name=\"Debug Agent\", provider=\"gpt-4o-mini\")\n\n# Run with verbose=True to see all reasoning steps\nanswer = agent.run(\n    \"What is 15% of 340?\",\n    verbose=True  # Shows Thought \u2192 Action \u2192 Observation\n)\n</code></pre> <p>Output: <pre><code>=== Iteration 1 ===\nThought: I need to calculate 15% of 340\nAction: calculate\nAction Input: 0.15 * 340\nObservation: Result: 51.0\n\n=== Iteration 2 ===\nThought: I have the answer\nAction: finish\nAction Input: 15% of 340 is 51\n\nFinal Answer: 15% of 340 is 51\n</code></pre></p>"},{"location":"features/reasoning-strategies/#analyzing-reasoning-quality","title":"Analyzing Reasoning Quality","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Analyzer\",\n    provider=\"gpt-4o-mini\",\n    max_iterations=10\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search tool\"\"\"\n    return f\"Results for: {query}\"\n\n# Track iterations\nclass ReasoningTracker:\n    def __init__(self):\n        self.iterations = 0\n        self.actions_taken = []\n\n    def track(self, thought, action):\n        self.iterations += 1\n        self.actions_taken.append(action)\n\ntracker = ReasoningTracker()\n\n# Run agent\nanswer = agent.run(\"Find information about Python\", verbose=True)\n\n# Analyze\nprint(f\"Total iterations: {tracker.iterations}\")\nprint(f\"Actions taken: {tracker.actions_taken}\")\nprint(f\"Efficiency: {'Good' if tracker.iterations &lt; 5 else 'Needs optimization'}\")\n</code></pre>"},{"location":"features/reasoning-strategies/#best-practices","title":"Best Practices","text":""},{"location":"features/reasoning-strategies/#1-set-appropriate-iteration-limits","title":"1. Set Appropriate Iteration Limits","text":"<pre><code># For simple queries\nsimple_agent = ReactAgent(max_iterations=5)\n\n# For complex research\nresearch_agent = ReactAgent(max_iterations=15)\n\n# For multi-step tasks\ncomplex_agent = ReactAgent(max_iterations=20)\n</code></pre>"},{"location":"features/reasoning-strategies/#2-provide-clear-instructions","title":"2. Provide Clear Instructions","text":"<pre><code># \u274c Bad: Vague instructions\nagent = ReactAgent(\n    instructions=\"Be helpful\"\n)\n\n# \u2705 Good: Specific guidelines\nagent = ReactAgent(\n    instructions=\"\"\"Follow these steps:\n    1. Break complex questions into sub-tasks\n    2. Use search for factual information\n    3. Use calculations for math\n    4. Verify important facts with multiple sources\n    5. Provide concise, accurate answers\n    \"\"\"\n)\n</code></pre>"},{"location":"features/reasoning-strategies/#3-use-temperature-wisely","title":"3. Use Temperature Wisely","text":"<pre><code># \u274c Bad: High temperature for factual tasks\nfactual_agent = ReactAgent(temperature=0.9)  # Too creative\n\n# \u2705 Good: Low temperature for factual tasks\nfactual_agent = ReactAgent(temperature=0)  # Deterministic\n\n# \u2705 Good: Medium temperature for creative tasks\ncreative_agent = ReactAgent(temperature=0.5)\n</code></pre>"},{"location":"features/reasoning-strategies/#4-monitor-iteration-count","title":"4. Monitor Iteration Count","text":"<pre><code>agent = ReactAgent(max_iterations=10)\n\nanswer = agent.run(query, verbose=True)\n\n# If frequently hitting max_iterations, either:\n# 1. Increase max_iterations\n# 2. Improve instructions\n# 3. Add more specific tools\n# 4. Break task into smaller queries\n</code></pre>"},{"location":"features/reasoning-strategies/#comparison-with-other-patterns","title":"Comparison with Other Patterns","text":"Pattern Reasoning Actions Memory Best For ReAct \u2705 Explicit \u2705 Tool-based \u2705 Optional General-purpose tasks ReWOO \u2705 Plan-first \u2705 Batched \u274c No Parallelizable tasks Reflection \u2705 Self-critique \u2705 Iterative \u2705 Yes Quality-critical tasks Plan-Execute \u2705 Upfront planning \u2705 Sequential \u2705 Yes Complex multi-step tasks <p>Framework Focus</p> <p>This framework currently implements the ReAct pattern. Future versions may include additional patterns like ReWOO, Reflection, and Plan-Execute.</p>"},{"location":"features/reasoning-strategies/#next-steps","title":"Next Steps","text":"<ul> <li>Built-in Tools - Learn about available tools</li> <li>Custom Tools - Create your own tools</li> <li>Memory Systems - Add context and history</li> <li>Objectives - Goal-oriented agent behavior</li> </ul>"},{"location":"features/reasoning-strategies/#further-reading","title":"Further Reading","text":"<ul> <li>ReAct Paper - Original research paper</li> <li>LangChain ReAct - Alternative implementation</li> <li>Anthropic Agent Patterns - Research on agent reasoning</li> </ul>"},{"location":"getting-started/first-agent/","title":"Your First Agent","text":"<p>Build a complete agent step-by-step and learn best practices.</p>"},{"location":"getting-started/first-agent/#project-setup","title":"Project Setup","text":"<p>Create a new project directory:</p> <pre><code>mkdir my-agent-project\ncd my-agent-project\npython -m venv .venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\npip install react-agent-framework\n</code></pre> <p>Create <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=sk-your-key-here\n</code></pre>"},{"location":"getting-started/first-agent/#simple-calculator-agent","title":"Simple Calculator Agent","text":"<p>Let's build a calculator agent that can perform mathematical operations.</p>"},{"location":"getting-started/first-agent/#step-1-create-the-agent","title":"Step 1: Create the Agent","text":"calculator_agent.py<pre><code>from react_agent_framework import ReactAgent\n\n# Create the agent\nagent = ReactAgent(\n    name=\"Calculator\",\n    description=\"A mathematical calculator assistant\",\n    provider=\"gpt-4o-mini\",\n    temperature=0,  # Deterministic for calculations\n    max_iterations=5\n)\n</code></pre>"},{"location":"getting-started/first-agent/#step-2-add-tools","title":"Step 2: Add Tools","text":"<pre><code>@agent.tool()\ndef add(a: float, b: float) -&gt; str:\n    \"\"\"Add two numbers together\"\"\"\n    result = a + b\n    return f\"{a} + {b} = {result}\"\n\n@agent.tool()\ndef subtract(a: float, b: float) -&gt; str:\n    \"\"\"Subtract b from a\"\"\"\n    result = a - b\n    return f\"{a} - {b} = {result}\"\n\n@agent.tool()\ndef multiply(a: float, b: float) -&gt; str:\n    \"\"\"Multiply two numbers\"\"\"\n    result = a * b\n    return f\"{a} \u00d7 {b} = {result}\"\n\n@agent.tool()\ndef divide(a: float, b: float) -&gt; str:\n    \"\"\"Divide a by b\"\"\"\n    if b == 0:\n        return \"Error: Cannot divide by zero\"\n    result = a / b\n    return f\"{a} \u00f7 {b} = {result}\"\n</code></pre>"},{"location":"getting-started/first-agent/#step-3-test-it","title":"Step 3: Test It","text":"<pre><code>if __name__ == \"__main__\":\n    # Test calculations\n    questions = [\n        \"What is 15 plus 27?\",\n        \"Multiply 8 by 9\",\n        \"What is 100 divided by 4?\",\n        \"Calculate 50 minus 23\"\n    ]\n\n    for question in questions:\n        print(f\"\\nQ: {question}\")\n        answer = agent.run(question, verbose=False)\n        print(f\"A: {answer}\")\n</code></pre>"},{"location":"getting-started/first-agent/#research-assistant","title":"Research Assistant","text":"<p>Build a more advanced agent that can search and analyze information.</p> research_agent.py<pre><code>from react_agent_framework import ReactAgent\n\n# Create research agent\nagent = ReactAgent(\n    name=\"Research Assistant\",\n    description=\"An AI that helps with web research and analysis\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Use built-in search tools\nagent.use_tools(\"search.*\")\n\n# Add custom analysis tool\n@agent.tool()\ndef summarize(text: str) -&gt; str:\n    \"\"\"Create a brief summary of the given text\"\"\"\n    # In real implementation, you might use another LLM call or algorithm\n    words = text.split()\n    summary = \" \".join(words[:100])  # Simple truncation\n    return f\"Summary: {summary}...\"\n\n# Use it\nquestion = \"What are the latest developments in quantum computing?\"\nanswer = agent.run(question, verbose=True)\nprint(f\"\\nFinal Answer: {answer}\")\n</code></pre>"},{"location":"getting-started/first-agent/#file-management-agent","title":"File Management Agent","text":"<p>Agent that can work with files and directories.</p> file_agent.py<pre><code>from react_agent_framework import ReactAgent\nfrom pathlib import Path\n\nagent = ReactAgent(\n    name=\"File Manager\",\n    description=\"Helps manage files and directories\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Use filesystem tools\nagent.use_tools(\"filesystem.*\")\n\n# Add custom tool\n@agent.tool()\ndef count_files(directory: str) -&gt; str:\n    \"\"\"Count the number of files in a directory\"\"\"\n    try:\n        path = Path(directory)\n        files = list(path.glob(\"*\"))\n        file_count = len([f for f in files if f.is_file()])\n        dir_count = len([f for f in files if f.is_dir()])\n        return f\"Found {file_count} files and {dir_count} directories in {directory}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Use it\ntasks = [\n    \"List all files in the current directory\",\n    \"Count how many Python files are here\",\n]\n\nfor task in tasks:\n    print(f\"\\nTask: {task}\")\n    result = agent.run(task)\n    print(f\"Result: {result}\")\n</code></pre>"},{"location":"getting-started/first-agent/#multi-purpose-agent","title":"Multi-Purpose Agent","text":"<p>Combine multiple capabilities in one agent.</p> multi_agent.py<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Multi-Purpose Assistant\",\n    description=\"An assistant that can search, calculate, and manage files\",\n    provider=\"gpt-4o-mini\",\n    enable_memory=True  # Remember conversations\n)\n\n# Add all built-in tools\nagent.use_tools(\"*\")\n\n# Add custom tools\n@agent.tool()\ndef create_report(title: str, content: str) -&gt; str:\n    \"\"\"Create a formatted report\"\"\"\n    report = f\"\"\"\n    ={'='*50}\n    REPORT: {title}\n    ={'='*50}\n\n    {content}\n\n    ={'='*50}\n    \"\"\"\n    return report\n\n# Interactive mode\nprint(\"Multi-Purpose Assistant (type 'quit' to exit)\")\nwhile True:\n    query = input(\"\\nYou: \")\n    if query.lower() in ['quit', 'exit', 'bye']:\n        break\n\n    answer = agent.run(query)\n    print(f\"Assistant: {answer}\")\n</code></pre>"},{"location":"getting-started/first-agent/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/first-agent/#1-clear-tool-descriptions","title":"1. Clear Tool Descriptions","text":"<pre><code>@agent.tool()\ndef search_papers(query: str, year: int = 2024) -&gt; str:\n    \"\"\"\n    Search for academic papers.\n\n    Args:\n        query: The search query (topic, keywords, etc.)\n        year: Publication year to filter by (default: 2024)\n\n    Returns:\n        List of relevant papers found\n    \"\"\"\n    # Implementation\n    pass\n</code></pre>"},{"location":"getting-started/first-agent/#2-error-handling","title":"2. Error Handling","text":"<pre><code>@agent.tool()\ndef divide(a: float, b: float) -&gt; str:\n    \"\"\"Divide two numbers\"\"\"\n    try:\n        if b == 0:\n            return \"Error: Cannot divide by zero\"\n        result = a / b\n        return f\"{a} \u00f7 {b} = {result}\"\n    except Exception as e:\n        return f\"Error performing division: {str(e)}\"\n</code></pre>"},{"location":"getting-started/first-agent/#3-type-hints","title":"3. Type Hints","text":"<pre><code>from typing import List, Dict, Optional\n\n@agent.tool()\ndef analyze_data(\n    values: List[float],\n    method: str = \"mean\"\n) -&gt; str:\n    \"\"\"Analyze a list of numerical values\"\"\"\n    # Implementation with proper typing\n    pass\n</code></pre>"},{"location":"getting-started/first-agent/#4-appropriate-temperature","title":"4. Appropriate Temperature","text":"<pre><code># For factual/deterministic tasks\ncalculator = ReactAgent(\n    name=\"Calculator\",\n    temperature=0  # No randomness\n)\n\n# For creative tasks\nwriter = ReactAgent(\n    name=\"Writer\",\n    temperature=0.7  # More creative\n)\n</code></pre>"},{"location":"getting-started/first-agent/#5-iteration-limits","title":"5. Iteration Limits","text":"<pre><code>agent = ReactAgent(\n    name=\"Agent\",\n    max_iterations=10  # Prevent infinite loops\n)\n</code></pre>"},{"location":"getting-started/first-agent/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Try Different Providers</p> <p>Learn about multi-provider support</p> <p> Multi-Provider</p> </li> <li> <p> Add Memory</p> <p>Give your agent memory</p> <p> Memory Systems</p> </li> <li> <p> Set Objectives</p> <p>Make goal-oriented agents</p> <p> Objectives</p> </li> <li> <p> Connect to MCP</p> <p>Use external tool servers</p> <p> MCP Integration</p> </li> </ul>"},{"location":"getting-started/first-agent/#complete-example","title":"Complete Example","text":"<p>Here's a complete, production-ready example:</p> production_agent.py<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory.chat import SimpleChatMemory\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\n\ndef create_agent():\n    \"\"\"Factory function to create configured agent\"\"\"\n    agent = ReactAgent(\n        name=\"Production Assistant\",\n        description=\"A production-ready AI assistant\",\n        provider=\"gpt-4o-mini\",\n        temperature=0.3,\n        max_iterations=10,\n        chat_memory=SimpleChatMemory(max_messages=100)\n    )\n\n    # Add tools\n    agent.use_tools(\"search.*\", \"computation.*\")\n\n    @agent.tool()\n    def custom_tool(param: str) -&gt; str:\n        \"\"\"Custom tool with proper error handling\"\"\"\n        try:\n            # Your implementation\n            result = f\"Processed: {param}\"\n            return result\n        except Exception as e:\n            logging.error(f\"Tool error: {e}\")\n            return f\"Error: {str(e)}\"\n\n    return agent\n\ndef main():\n    agent = create_agent()\n\n    # Example usage\n    result = agent.run(\n        \"Search for Python best practices and summarize\",\n        verbose=True\n    )\n\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Run it:</p> <pre><code>python production_agent.py\n</code></pre> <p>Congratulations!</p> <p>You've built your first complete agent! Continue exploring the framework's features to build even more powerful agents.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Learn how to install ReAct Agent Framework in your project.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>pip or uv package manager</li> </ul>"},{"location":"getting-started/installation/#install-from-pypi","title":"Install from PyPI","text":"Basic InstallationWith MCP SupportWith All ProvidersWith Memory BackendsEverything <pre><code>pip install react-agent-framework\n</code></pre> <pre><code>pip install react-agent-framework[mcp]\n</code></pre> <pre><code>pip install react-agent-framework[anthropic,google]\n</code></pre> <pre><code>pip install react-agent-framework[chroma,faiss]\n</code></pre> <pre><code>pip install react-agent-framework[all]\n</code></pre>"},{"location":"getting-started/installation/#install-from-source","title":"Install from Source","text":"<p>For development or to get the latest changes:</p> <pre><code># Clone the repository\ngit clone https://github.com/marcosf63/react-agent-framework.git\ncd react-agent-framework\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install in editable mode\npip install -e .\n\n# Or with all extras\npip install -e \".[all]\"\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/installation/#ai-providers","title":"AI Providers","text":"<pre><code># Anthropic Claude\npip install react-agent-framework[anthropic]\n\n# Google Gemini\npip install react-agent-framework[google]\n\n# All providers\npip install react-agent-framework[anthropic,google]\n</code></pre>"},{"location":"getting-started/installation/#memory-backends","title":"Memory Backends","text":"<pre><code># ChromaDB\npip install react-agent-framework[chroma]\n\n# FAISS\npip install react-agent-framework[faiss]\n\n# Both\npip install react-agent-framework[chroma,faiss]\n</code></pre>"},{"location":"getting-started/installation/#mcp-support","title":"MCP Support","text":"<pre><code># Model Context Protocol\npip install react-agent-framework[mcp]\n</code></pre>"},{"location":"getting-started/installation/#development-tools","title":"Development Tools","text":"<pre><code># Development dependencies\npip install react-agent-framework[dev]\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Check version\nimport react_agent_framework\nprint(react_agent_framework.__version__)  # Should print: 0.9.0\n\n# Create a basic agent to test\nagent = ReactAgent(name=\"Test Agent\")\nprint(agent)  # Should print agent info\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#api-keys","title":"API Keys","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># OpenAI (default provider)\nOPENAI_API_KEY=sk-...\n\n# Anthropic (optional)\nANTHROPIC_API_KEY=sk-ant-...\n\n# Google (optional)\nGOOGLE_API_KEY=AI...\n\n# Other services (optional)\nGITHUB_TOKEN=ghp_...\nBRAVE_API_KEY=...\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>The framework automatically loads environment variables from <code>.env</code> files using <code>python-dotenv</code>.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li> Quickstart Guide - Get started in 5 minutes</li> <li> Your First Agent - Build your first agent</li> <li> Features Overview - Explore all features</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#importerror-no-module-named-react_agent_framework","title":"ImportError: No module named 'react_agent_framework'","text":"<p>Make sure you've installed the package:</p> <pre><code>pip install react-agent-framework\n</code></pre>"},{"location":"getting-started/installation/#provider-not-found","title":"Provider not found","text":"<p>Install the specific provider:</p> <pre><code>pip install react-agent-framework[anthropic]  # For Claude\npip install react-agent-framework[google]     # For Gemini\n</code></pre>"},{"location":"getting-started/installation/#mcp-tools-not-working","title":"MCP tools not working","text":"<p>Install MCP support:</p> <pre><code>pip install react-agent-framework[mcp]\n</code></pre> <p>Using Virtual Environments</p> <p>Always use virtual environments to isolate dependencies:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Get up and running with ReAct Agent Framework in 5 minutes!</p>"},{"location":"getting-started/quickstart/#step-1-install","title":"Step 1: Install","text":"<pre><code>pip install react-agent-framework\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-configure-api-key","title":"Step 2: Configure API Key","text":"<p>Create a <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=sk-your-key-here\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-create-your-first-agent","title":"Step 3: Create Your First Agent","text":"<p>Create a file <code>my_agent.py</code>:</p> <pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(\n    name=\"Assistant\",\n    description=\"A helpful AI assistant\"\n)\n\n# Add a simple tool\n@agent.tool()\ndef greet(name: str) -&gt; str:\n    \"\"\"Greet someone by name\"\"\"\n    return f\"Hello, {name}! Nice to meet you!\"\n\n# Run the agent\nanswer = agent.run(\"Greet Alice\")\nprint(answer)\n</code></pre>"},{"location":"getting-started/quickstart/#step-4-run-it","title":"Step 4: Run It","text":"<pre><code>python my_agent.py\n</code></pre> <p>Output: <pre><code>Hello, Alice! Nice to meet you!\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-5-add-more-tools","title":"Step 5: Add More Tools","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Calculator Agent\")\n\n@agent.tool()\ndef add(a: float, b: float) -&gt; str:\n    \"\"\"Add two numbers\"\"\"\n    return f\"{a} + {b} = {a + b}\"\n\n@agent.tool()\ndef multiply(a: float, b: float) -&gt; str:\n    \"\"\"Multiply two numbers\"\"\"\n    return f\"{a} \u00d7 {b} = {a * b}\"\n\n# Agent can now use multiple tools\nanswer = agent.run(\"What is 5 plus 3?\")\nprint(answer)  # \"8\"\n\nanswer = agent.run(\"Multiply 4 by 7\")\nprint(answer)  # \"28\"\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-use-built-in-tools","title":"Step 6: Use Built-in Tools","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Research Agent\")\n\n# Use all search tools\nagent.use_tools(\"search.*\")\n\n# Now agent can search the web\nanswer = agent.run(\"What is the latest news about AI?\")\nprint(answer)\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-try-different-providers","title":"Step 7: Try Different Providers","text":"OpenAI (Default)Anthropic ClaudeGoogle GeminiOllama (Local) <pre><code>agent = ReactAgent(\n    name=\"GPT Agent\",\n    provider=\"gpt-4o-mini\"\n)\n</code></pre> <pre><code>agent = ReactAgent(\n    name=\"Claude Agent\",\n    provider=\"anthropic://claude-3-5-sonnet-20241022\"\n)\n</code></pre> <pre><code>agent = ReactAgent(\n    name=\"Gemini Agent\",\n    provider=\"google://gemini-1.5-flash\"\n)\n</code></pre> <pre><code>agent = ReactAgent(\n    name=\"Llama Agent\",\n    provider=\"ollama://llama3.2\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#step-8-enable-verbose-mode","title":"Step 8: Enable Verbose Mode","text":"<p>See the agent's reasoning process:</p> <pre><code>agent = ReactAgent(name=\"Debug Agent\")\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for information\"\"\"\n    return f\"Results for: {query}\"\n\n# Enable verbose mode\nanswer = agent.run(\n    \"Search for Python programming tips\",\n    verbose=True  # Shows step-by-step reasoning\n)\n</code></pre> <p>Output: <pre><code>============================================================\nITERATION 1\n============================================================\n\nThought: I need to search for Python programming tips\nAction: search\nAction Input: Python programming tips\n\nObservation: Results for: Python programming tips\n\nThought: I have the search results\nAction: finish\nAction Input: Found Python programming tips\n\n============================================================\nAnswer: Found Python programming tips\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-9-add-memory","title":"Step 9: Add Memory","text":"<p>Make your agent remember conversations:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Memory Agent\",\n    enable_memory=True  # Simple memory\n)\n\n@agent.tool()\ndef save_note(note: str) -&gt; str:\n    \"\"\"Save a note\"\"\"\n    return f\"Saved: {note}\"\n\n# First conversation\nagent.run(\"Save a note: Meeting at 3pm\")\n\n# Later conversation - agent remembers context\nagent.run(\"What time is my meeting?\")\n# Agent can use memory to recall the saved note\n</code></pre>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Build Complete Agents</p> <p>Learn to build sophisticated agents</p> <p> First Agent Tutorial</p> </li> <li> <p> Explore Built-in Tools</p> <p>Discover all available tools</p> <p> Built-in Tools</p> </li> <li> <p> Add Memory</p> <p>Give your agent memory</p> <p> Memory Systems</p> </li> <li> <p> Use MCP Servers</p> <p>Connect to external tools</p> <p> MCP Integration</p> </li> </ul>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#research-agent","title":"Research Agent","text":"<pre><code>agent = ReactAgent(name=\"Researcher\")\nagent.use_tools(\"search.*\")\n\nanswer = agent.run(\"Research quantum computing applications\")\n</code></pre>"},{"location":"getting-started/quickstart/#file-management-agent","title":"File Management Agent","text":"<pre><code>agent = ReactAgent(name=\"File Manager\")\nagent.use_tools(\"filesystem.*\")\n\nanswer = agent.run(\"List all Python files in current directory\")\n</code></pre>"},{"location":"getting-started/quickstart/#calculator-agent","title":"Calculator Agent","text":"<pre><code>agent = ReactAgent(name=\"Calculator\")\nagent.use_tools(\"computation.*\")\n\nanswer = agent.run(\"Calculate the compound interest on $1000 at 5% for 10 years\")\n</code></pre>"},{"location":"getting-started/quickstart/#multi-tool-agent","title":"Multi-Tool Agent","text":"<pre><code>agent = ReactAgent(name=\"Multi-Tool Agent\")\nagent.use_tools(\"*\")  # All tools\n\nanswer = agent.run(\"Search for Python tutorials and save results to a file\")\n</code></pre> <p>You're Ready!</p> <p>You now know the basics of ReAct Agent Framework. Explore the Features section to learn more!</p>"},{"location":"guides/custom-providers/","title":"Custom LLM Providers","text":"<p>The ReAct Agent Framework supports multiple LLM providers out of the box and makes it easy to create your own custom providers. This guide covers both using built-in providers and creating custom ones.</p>"},{"location":"guides/custom-providers/#built-in-providers","title":"Built-in Providers","text":"<p>The framework includes support for:</p> <ul> <li>OpenAI - GPT-4, GPT-3.5, etc.</li> <li>Anthropic - Claude 3.5 Sonnet, Claude 3 Opus, etc.</li> <li>Google - Gemini 1.5 Flash, Gemini 1.5 Pro</li> <li>Ollama - Local LLMs (Llama, Mistral, Phi, etc.)</li> </ul>"},{"location":"guides/custom-providers/#using-built-in-providers","title":"Using Built-in Providers","text":""},{"location":"guides/custom-providers/#openai-default","title":"OpenAI (Default)","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Simple string (defaults to OpenAI)\nagent = ReactAgent(\n    name=\"Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Explicit URL-style\nagent = ReactAgent(\n    name=\"Assistant\",\n    provider=\"openai://gpt-4o-mini\"\n)\n\n# With API key\nagent = ReactAgent(\n    name=\"Assistant\",\n    provider=\"gpt-4o-mini\",\n    api_key=\"sk-...\"\n)\n</code></pre>"},{"location":"guides/custom-providers/#anthropic-claude","title":"Anthropic Claude","text":"<pre><code># URL-style\nagent = ReactAgent(\n    name=\"Claude Assistant\",\n    provider=\"anthropic://claude-3-5-sonnet-20241022\"\n)\n\n# Auto-detected from model name\nagent = ReactAgent(\n    name=\"Claude Assistant\",\n    provider=\"claude-3-5-sonnet-20241022\"\n)\n\n# Using provider object\nfrom react_agent_framework.providers import AnthropicProvider\n\nprovider = AnthropicProvider(\n    model=\"claude-3-5-sonnet-20241022\",\n    api_key=\"sk-ant-...\"  # Optional, uses ANTHROPIC_API_KEY env var\n)\n\nagent = ReactAgent(name=\"Assistant\", provider=provider)\n</code></pre>"},{"location":"guides/custom-providers/#google-gemini","title":"Google Gemini","text":"<pre><code># URL-style\nagent = ReactAgent(\n    name=\"Gemini Assistant\",\n    provider=\"google://gemini-1.5-flash\"\n)\n\n# Auto-detected from model name\nagent = ReactAgent(\n    name=\"Gemini Assistant\",\n    provider=\"gemini-1.5-flash\"\n)\n\n# Using provider object\nfrom react_agent_framework.providers import GoogleProvider\n\nprovider = GoogleProvider(\n    model=\"gemini-1.5-flash\",\n    api_key=\"...\"  # Optional, uses GOOGLE_API_KEY env var\n)\n\nagent = ReactAgent(name=\"Assistant\", provider=provider)\n</code></pre>"},{"location":"guides/custom-providers/#ollama-local-llms","title":"Ollama (Local LLMs)","text":"<pre><code># URL-style (default localhost:11434)\nagent = ReactAgent(\n    name=\"Llama Assistant\",\n    provider=\"ollama://llama3.2\"\n)\n\n# Auto-detected from model name\nagent = ReactAgent(\n    name=\"Llama Assistant\",\n    provider=\"llama3.2\"  # Also works: mistral, phi, codellama\n)\n\n# Using provider object with custom URL\nfrom react_agent_framework.providers import OllamaProvider\n\nprovider = OllamaProvider(\n    model=\"llama3.2\",\n    base_url=\"http://localhost:11434\"  # Custom Ollama server\n)\n\nagent = ReactAgent(name=\"Assistant\", provider=provider)\n</code></pre> <p>Ollama Setup</p> <p>To use Ollama, you need to install and run it locally: <pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Pull a model\nollama pull llama3.2\n\n# Start Ollama server\nollama serve\n</code></pre></p>"},{"location":"guides/custom-providers/#provider-comparison","title":"Provider Comparison","text":"Provider Best For API Key Required Local Cost OpenAI General-purpose, latest models Yes No $$ Anthropic Long context, analysis Yes No $$ Google Fast, multimodal Yes No $ Ollama Privacy, offline use No Yes Free"},{"location":"guides/custom-providers/#auto-detection","title":"Auto-Detection","text":"<p>The framework automatically detects the provider based on model name:</p> <pre><code>from react_agent_framework import ReactAgent\n\n# These are automatically detected:\nagent1 = ReactAgent(provider=\"gpt-4o-mini\")              # -&gt; OpenAI\nagent2 = ReactAgent(provider=\"claude-3-5-sonnet-20241022\")  # -&gt; Anthropic\nagent3 = ReactAgent(provider=\"gemini-1.5-flash\")         # -&gt; Google\nagent4 = ReactAgent(provider=\"llama3.2\")                 # -&gt; Ollama\nagent5 = ReactAgent(provider=\"mistral\")                  # -&gt; Ollama\n\n# Check what was detected\nprint(agent1.get_provider_info())\n# Output: {'provider': 'OpenAIProvider', 'model': 'gpt-4o-mini'}\n</code></pre>"},{"location":"guides/custom-providers/#creating-custom-providers","title":"Creating Custom Providers","text":"<p>To create a custom provider, extend <code>BaseLLMProvider</code>:</p>"},{"location":"guides/custom-providers/#step-1-define-provider-class","title":"Step 1: Define Provider Class","text":"<pre><code>from typing import List, Optional\nfrom react_agent_framework.providers.base import BaseLLMProvider, Message\n\nclass CustomProvider(BaseLLMProvider):\n    \"\"\"Custom LLM provider\"\"\"\n\n    def __init__(\n        self,\n        model: str,\n        api_key: Optional[str] = None,\n        base_url: str = \"https://api.example.com\",\n        **kwargs\n    ):\n        \"\"\"\n        Initialize custom provider\n\n        Args:\n            model: Model identifier\n            api_key: API key for authentication\n            base_url: API base URL\n            **kwargs: Additional provider-specific parameters\n        \"\"\"\n        super().__init__(model, api_key, **kwargs)\n        self.base_url = base_url\n\n    def generate(\n        self,\n        messages: List[Message],\n        temperature: float = 0,\n        **kwargs\n    ) -&gt; str:\n        \"\"\"\n        Generate response from messages\n\n        Args:\n            messages: Conversation messages\n            temperature: Sampling temperature (0-1)\n            **kwargs: Additional generation parameters\n\n        Returns:\n            Generated text response\n        \"\"\"\n        # 1. Convert messages to API format\n        api_messages = self._convert_messages(messages)\n\n        # 2. Call API\n        response = self._call_api(\n            messages=api_messages,\n            temperature=temperature,\n            **kwargs\n        )\n\n        # 3. Extract and return text\n        return self._extract_text(response)\n\n    def get_model_name(self) -&gt; str:\n        \"\"\"Return model identifier\"\"\"\n        return self.model\n\n    def _convert_messages(self, messages: List[Message]) -&gt; list:\n        \"\"\"Convert Message objects to API format\"\"\"\n        return [\n            {\"role\": msg.role, \"content\": msg.content}\n            for msg in messages\n        ]\n\n    def _call_api(self, messages: list, temperature: float, **kwargs) -&gt; dict:\n        \"\"\"Call the LLM API\"\"\"\n        import requests\n\n        payload = {\n            \"model\": self.model,\n            \"messages\": messages,\n            \"temperature\": temperature,\n            **kwargs\n        }\n\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        response = requests.post(\n            f\"{self.base_url}/chat/completions\",\n            json=payload,\n            headers=headers,\n            timeout=60\n        )\n        response.raise_for_status()\n\n        return response.json()\n\n    def _extract_text(self, response: dict) -&gt; str:\n        \"\"\"Extract text from API response\"\"\"\n        return response[\"choices\"][0][\"message\"][\"content\"]\n</code></pre>"},{"location":"guides/custom-providers/#step-2-use-custom-provider","title":"Step 2: Use Custom Provider","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create custom provider instance\nprovider = CustomProvider(\n    model=\"custom-model-v1\",\n    api_key=\"your-api-key\",\n    base_url=\"https://api.custom-llm.com\"\n)\n\n# Use with ReactAgent\nagent = ReactAgent(\n    name=\"Custom Assistant\",\n    provider=provider\n)\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search tool\"\"\"\n    return f\"Results for: {query}\"\n\n# Agent now uses your custom provider\nanswer = agent.run(\"What is AI?\", verbose=True)\n</code></pre>"},{"location":"guides/custom-providers/#real-world-example-hugging-face-provider","title":"Real-World Example: Hugging Face Provider","text":"<p>Here's a complete example implementing a Hugging Face Inference API provider:</p> <pre><code>from typing import List, Optional\nimport requests\nfrom react_agent_framework.providers.base import BaseLLMProvider, Message\n\nclass HuggingFaceProvider(BaseLLMProvider):\n    \"\"\"\n    Hugging Face Inference API provider\n\n    Supports models hosted on Hugging Face Inference API\n    \"\"\"\n\n    def __init__(\n        self,\n        model: str = \"meta-llama/Llama-3.2-3B-Instruct\",\n        api_key: Optional[str] = None,\n        **kwargs\n    ):\n        \"\"\"\n        Initialize Hugging Face provider\n\n        Args:\n            model: Model ID on Hugging Face Hub\n            api_key: Hugging Face API token (or use HF_TOKEN env var)\n            **kwargs: Additional parameters\n        \"\"\"\n        super().__init__(model, api_key, **kwargs)\n\n        # Get API key from env if not provided\n        if not self.api_key:\n            import os\n            self.api_key = os.getenv(\"HF_TOKEN\")\n\n        if not self.api_key:\n            raise ValueError(\n                \"Hugging Face API token required. \"\n                \"Set HF_TOKEN env var or pass api_key parameter\"\n            )\n\n        self.base_url = \"https://api-inference.huggingface.co/models\"\n\n    def generate(\n        self,\n        messages: List[Message],\n        temperature: float = 0,\n        max_tokens: int = 500,\n        **kwargs\n    ) -&gt; str:\n        \"\"\"Generate response using HF Inference API\"\"\"\n\n        # Build prompt from messages\n        prompt = self._build_prompt(messages)\n\n        # Prepare request\n        headers = {\"Authorization\": f\"Bearer {self.api_key}\"}\n        payload = {\n            \"inputs\": prompt,\n            \"parameters\": {\n                \"temperature\": temperature,\n                \"max_new_tokens\": max_tokens,\n                \"return_full_text\": False,\n                **kwargs\n            }\n        }\n\n        try:\n            response = requests.post(\n                f\"{self.base_url}/{self.model}\",\n                headers=headers,\n                json=payload,\n                timeout=60\n            )\n            response.raise_for_status()\n\n            result = response.json()\n\n            # Extract generated text\n            if isinstance(result, list) and len(result) &gt; 0:\n                return result[0].get(\"generated_text\", \"\")\n            else:\n                return str(result)\n\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 503:\n                raise RuntimeError(\n                    f\"Model '{self.model}' is loading. \"\n                    \"Please wait a moment and try again.\"\n                )\n            raise RuntimeError(f\"HF API error: {str(e)}\")\n\n    def _build_prompt(self, messages: List[Message]) -&gt; str:\n        \"\"\"Build chat prompt from messages\"\"\"\n        prompt_parts = []\n\n        for msg in messages:\n            if msg.role == \"system\":\n                prompt_parts.append(f\"System: {msg.content}\")\n            elif msg.role == \"user\":\n                prompt_parts.append(f\"User: {msg.content}\")\n            elif msg.role == \"assistant\":\n                prompt_parts.append(f\"Assistant: {msg.content}\")\n\n        prompt_parts.append(\"Assistant:\")\n        return \"\\n\\n\".join(prompt_parts)\n\n    def get_model_name(self) -&gt; str:\n        \"\"\"Return model name\"\"\"\n        return self.model\n\n# Usage\nprovider = HuggingFaceProvider(\n    model=\"meta-llama/Llama-3.2-3B-Instruct\",\n    api_key=\"hf_...\"\n)\n\nagent = ReactAgent(name=\"HF Assistant\", provider=provider)\n</code></pre>"},{"location":"guides/custom-providers/#advanced-streaming-support","title":"Advanced: Streaming Support","text":"<p>Add streaming support to your custom provider:</p> <pre><code>from typing import Iterator\n\nclass StreamingProvider(BaseLLMProvider):\n    \"\"\"Provider with streaming support\"\"\"\n\n    def generate(self, messages: List[Message], temperature: float = 0, **kwargs) -&gt; str:\n        \"\"\"Non-streaming generation (required)\"\"\"\n        # Convert streaming to string\n        chunks = list(self.generate_stream(messages, temperature, **kwargs))\n        return \"\".join(chunks)\n\n    def generate_stream(\n        self,\n        messages: List[Message],\n        temperature: float = 0,\n        **kwargs\n    ) -&gt; Iterator[str]:\n        \"\"\"\n        Streaming generation (optional)\n\n        Yields:\n            Text chunks as they are generated\n        \"\"\"\n        import requests\n\n        payload = {\n            \"model\": self.model,\n            \"messages\": [{\"role\": m.role, \"content\": m.content} for m in messages],\n            \"temperature\": temperature,\n            \"stream\": True,\n            **kwargs\n        }\n\n        headers = {\"Authorization\": f\"Bearer {self.api_key}\"}\n\n        with requests.post(\n            f\"{self.base_url}/chat/completions\",\n            json=payload,\n            headers=headers,\n            stream=True,\n            timeout=60\n        ) as response:\n            response.raise_for_status()\n\n            for line in response.iter_lines():\n                if line:\n                    # Parse SSE format\n                    if line.startswith(b\"data: \"):\n                        data = line[6:].decode(\"utf-8\")\n                        if data == \"[DONE]\":\n                            break\n\n                        import json\n                        chunk = json.loads(data)\n                        delta = chunk[\"choices\"][0][\"delta\"]\n\n                        if \"content\" in delta:\n                            yield delta[\"content\"]\n\n    def get_model_name(self) -&gt; str:\n        return self.model\n</code></pre>"},{"location":"guides/custom-providers/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<p>Implement robust error handling:</p> <pre><code>class RobustProvider(BaseLLMProvider):\n    \"\"\"Provider with comprehensive error handling\"\"\"\n\n    def generate(self, messages: List[Message], temperature: float = 0, **kwargs) -&gt; str:\n        \"\"\"Generate with error handling\"\"\"\n        try:\n            return self._generate_internal(messages, temperature, **kwargs)\n\n        except requests.exceptions.ConnectionError:\n            raise ConnectionError(\n                f\"Cannot connect to {self.base_url}. \"\n                \"Check your internet connection.\"\n            )\n\n        except requests.exceptions.Timeout:\n            raise TimeoutError(\n                f\"Request timed out for model '{self.model}'. \"\n                \"Try again or use a different model.\"\n            )\n\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 401:\n                raise PermissionError(\n                    \"Invalid API key. Check your credentials.\"\n                )\n            elif e.response.status_code == 429:\n                raise RuntimeError(\n                    \"Rate limit exceeded. Please wait and try again.\"\n                )\n            elif e.response.status_code == 503:\n                raise RuntimeError(\n                    \"Service temporarily unavailable. Try again later.\"\n                )\n            else:\n                raise RuntimeError(\n                    f\"API error ({e.response.status_code}): {e.response.text}\"\n                )\n\n        except Exception as e:\n            raise RuntimeError(f\"Unexpected error: {str(e)}\")\n\n    def _generate_internal(self, messages, temperature, **kwargs):\n        \"\"\"Internal generation logic\"\"\"\n        # Implementation\n        pass\n\n    def get_model_name(self) -&gt; str:\n        return self.model\n</code></pre>"},{"location":"guides/custom-providers/#testing-your-provider","title":"Testing Your Provider","text":"<p>Test your custom provider:</p> <pre><code>from react_agent_framework.providers.base import Message\n\ndef test_custom_provider():\n    \"\"\"Test custom provider implementation\"\"\"\n\n    # Create provider\n    provider = CustomProvider(\n        model=\"test-model\",\n        api_key=\"test-key\"\n    )\n\n    # Test basic generation\n    messages = [\n        Message(role=\"system\", content=\"You are a helpful assistant.\"),\n        Message(role=\"user\", content=\"Hello!\")\n    ]\n\n    try:\n        response = provider.generate(messages, temperature=0.7)\n        print(f\"\u2705 Generation works: {response[:50]}...\")\n\n    except Exception as e:\n        print(f\"\u274c Generation failed: {str(e)}\")\n\n    # Test with ReactAgent\n    from react_agent_framework import ReactAgent\n\n    agent = ReactAgent(name=\"Test Agent\", provider=provider)\n\n    @agent.tool()\n    def dummy_tool(query: str) -&gt; str:\n        return f\"Result: {query}\"\n\n    try:\n        answer = agent.run(\"Test query\", verbose=True)\n        print(f\"\u2705 Agent integration works: {answer[:50]}...\")\n\n    except Exception as e:\n        print(f\"\u274c Agent integration failed: {str(e)}\")\n\n# Run tests\ntest_custom_provider()\n</code></pre>"},{"location":"guides/custom-providers/#provider-factory-integration","title":"Provider Factory Integration","text":"<p>Optionally, integrate your provider into the factory:</p> <pre><code># In your custom module\nfrom react_agent_framework.providers.factory import create_provider\nfrom react_agent_framework.providers.base import BaseLLMProvider\n\n# Save original factory function\n_original_create = create_provider\n\ndef create_provider_with_custom(provider, api_key=None):\n    \"\"\"Extended factory with custom provider support\"\"\"\n\n    if isinstance(provider, str):\n        if provider.startswith(\"custom://\"):\n            model = provider.replace(\"custom://\", \"\")\n            from my_module import CustomProvider\n            return CustomProvider(model=model, api_key=api_key)\n\n    # Fall back to original\n    return _original_create(provider, api_key)\n\n# Monkey patch (use with caution)\nimport react_agent_framework.providers.factory as factory\nfactory.create_provider = create_provider_with_custom\n\n# Now you can use:\n# agent = ReactAgent(provider=\"custom://my-model\")\n</code></pre>"},{"location":"guides/custom-providers/#best-practices","title":"Best Practices","text":""},{"location":"guides/custom-providers/#1-handle-rate-limits","title":"1. Handle Rate Limits","text":"<pre><code>import time\nfrom functools import wraps\n\ndef retry_with_backoff(max_retries=3):\n    \"\"\"Decorator for retry logic\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except requests.exceptions.HTTPError as e:\n                    if e.response.status_code == 429:\n                        if attempt &lt; max_retries - 1:\n                            wait = 2 ** attempt\n                            time.sleep(wait)\n                            continue\n                    raise\n            return None\n        return wrapper\n    return decorator\n\nclass RateLimitedProvider(BaseLLMProvider):\n    @retry_with_backoff(max_retries=3)\n    def generate(self, messages, temperature=0, **kwargs):\n        # Implementation\n        pass\n</code></pre>"},{"location":"guides/custom-providers/#2-validate-configuration","title":"2. Validate Configuration","text":"<pre><code>class ValidatedProvider(BaseLLMProvider):\n    def __init__(self, model: str, api_key: Optional[str] = None, **kwargs):\n        super().__init__(model, api_key, **kwargs)\n\n        # Validate API key\n        if not self.api_key:\n            raise ValueError(\"API key is required\")\n\n        # Validate model\n        if not self._is_valid_model(model):\n            raise ValueError(f\"Invalid model: {model}\")\n\n    def _is_valid_model(self, model: str) -&gt; bool:\n        \"\"\"Check if model is supported\"\"\"\n        valid_models = [\"model-a\", \"model-b\", \"model-c\"]\n        return model in valid_models\n</code></pre>"},{"location":"guides/custom-providers/#3-add-logging","title":"3. Add Logging","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\nclass LoggedProvider(BaseLLMProvider):\n    def generate(self, messages, temperature=0, **kwargs):\n        logger.info(f\"Generating with model {self.model}, temp={temperature}\")\n\n        try:\n            response = self._call_api(messages, temperature, **kwargs)\n            logger.info(\"Generation successful\")\n            return response\n\n        except Exception as e:\n            logger.error(f\"Generation failed: {str(e)}\")\n            raise\n</code></pre>"},{"location":"guides/custom-providers/#next-steps","title":"Next Steps","text":"<ul> <li>Basic Usage - Learn agent basics</li> <li>Built-in Tools - Explore available tools</li> <li>Custom Tools - Create custom tools</li> <li>Multi-Provider Example - See all providers in action</li> </ul>"},{"location":"guides/custom-providers/#further-reading","title":"Further Reading","text":"<ul> <li>OpenAI API Documentation</li> <li>Anthropic Claude API</li> <li>Google Gemini API</li> <li>Ollama Documentation</li> <li>Hugging Face Inference API</li> </ul>"},{"location":"guides/custom-tools/","title":"Creating Custom Tools","text":"<p>Learn how to create powerful custom tools for your agents using decorators.</p>"},{"location":"guides/custom-tools/#overview","title":"Overview","text":"<p>Custom tools allow you to extend your agent's capabilities with any functionality you need. Tools are registered using the <code>@agent.tool()</code> decorator.</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Assistant\")\n\n@agent.tool()\ndef my_custom_tool(input: str) -&gt; str:\n    \"\"\"Tool description that the LLM will see\"\"\"\n    # Your implementation\n    return result\n</code></pre>"},{"location":"guides/custom-tools/#basic-tool-creation","title":"Basic Tool Creation","text":""},{"location":"guides/custom-tools/#simple-tool","title":"Simple Tool","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Assistant\")\n\n@agent.tool()\ndef get_current_time() -&gt; str:\n    \"\"\"Get the current time\"\"\"\n    from datetime import datetime\n    now = datetime.now()\n    return f\"Current time: {now.strftime('%H:%M:%S')}\"\n\n# Agent can now use this tool\nanswer = agent.run(\"What time is it?\")\n</code></pre>"},{"location":"guides/custom-tools/#tool-with-parameters","title":"Tool with Parameters","text":"<pre><code>@agent.tool()\ndef greet(name: str) -&gt; str:\n    \"\"\"Greet someone by name\"\"\"\n    return f\"Hello, {name}! Nice to meet you!\"\n\nanswer = agent.run(\"Greet Alice\")\n# Output: \"Hello, Alice! Nice to meet you!\"\n</code></pre>"},{"location":"guides/custom-tools/#custom-name-and-description","title":"Custom Name and Description","text":"<p>Override the tool name and description:</p> <pre><code>@agent.tool(\n    name=\"temperature_converter\",\n    description=\"Convert temperature between Celsius and Fahrenheit\"\n)\ndef convert_temp(input_str: str) -&gt; str:\n    \"\"\"Internal function docstring\"\"\"\n    # Parse input like \"25 C to F\" or \"77 F to C\"\n    # ... implementation ...\n    return result\n</code></pre>"},{"location":"guides/custom-tools/#type-hints-and-validation","title":"Type Hints and Validation","text":"<p>Use type hints for better LLM understanding:</p> <pre><code>@agent.tool()\ndef calculate_area(length: float, width: float) -&gt; str:\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        length: Length in meters\n        width: Width in meters\n\n    Returns:\n        Area in square meters\n    \"\"\"\n    area = length * width\n    return f\"Area: {area} m\u00b2\"\n</code></pre>"},{"location":"guides/custom-tools/#error-handling","title":"Error Handling","text":"<p>Always handle errors gracefully:</p> <pre><code>@agent.tool()\ndef divide_numbers(expression: str) -&gt; str:\n    \"\"\"Divide two numbers. Format: 'a / b'\"\"\"\n    try:\n        parts = expression.split(\"/\")\n        a = float(parts[0].strip())\n        b = float(parts[1].strip())\n\n        if b == 0:\n            return \"Error: Cannot divide by zero\"\n\n        result = a / b\n        return f\"{a} / {b} = {result}\"\n\n    except (ValueError, IndexError) as e:\n        return f\"Error: Invalid format. Use 'number / number'\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"guides/custom-tools/#complete-example","title":"Complete Example","text":"<p>Personal assistant with multiple custom tools:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom datetime import datetime\nimport random\n\nagent = ReactAgent(\n    name=\"Personal Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n@agent.tool()\ndef get_datetime() -&gt; str:\n    \"\"\"Get current date and time\"\"\"\n    now = datetime.now()\n    return f\"Date: {now.strftime('%Y-%m-%d')}, Time: {now.strftime('%H:%M:%S')}\"\n\n@agent.tool()\ndef random_number(range_str: str) -&gt; str:\n    \"\"\"Generate random number. Format: 'min-max' (e.g., '1-100')\"\"\"\n    try:\n        min_val, max_val = map(int, range_str.split(\"-\"))\n        number = random.randint(min_val, max_val)\n        return f\"Random number between {min_val} and {max_val}: {number}\"\n    except Exception as e:\n        return f\"Error: Use format 'min-max' (e.g., '1-100')\"\n\n@agent.tool()\ndef convert_temperature(input_str: str) -&gt; str:\n    \"\"\"Convert temperature. Format: 'C to F: 25' or 'F to C: 77'\"\"\"\n    try:\n        if \"C to F\" in input_str.upper():\n            celsius = float(input_str.split(\":\")[-1].strip())\n            fahrenheit = (celsius * 9/5) + 32\n            return f\"{celsius}\u00b0C = {fahrenheit}\u00b0F\"\n        elif \"F to C\" in input_str.upper():\n            fahrenheit = float(input_str.split(\":\")[-1].strip())\n            celsius = (fahrenheit - 32) * 5/9\n            return f\"{fahrenheit}\u00b0F = {celsius:.2f}\u00b0C\"\n        else:\n            return \"Use format: 'C to F: value' or 'F to C: value'\"\n    except Exception as e:\n        return f\"Conversion error: {str(e)}\"\n\n# Use the tools\nanswer = agent.run(\"What time is it?\")\nanswer = agent.run(\"Generate a random number between 1 and 100\")\nanswer = agent.run(\"Convert 25 Celsius to Fahrenheit\")\n</code></pre>"},{"location":"guides/custom-tools/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"guides/custom-tools/#tool-with-external-api","title":"Tool with External API","text":"<pre><code>import requests\n\n@agent.tool()\ndef get_weather(city: str) -&gt; str:\n    \"\"\"Get current weather for a city\"\"\"\n    try:\n        # Example with a weather API\n        api_key = \"your_api_key\"\n        url = f\"https://api.weather.com/v1/current?city={city}&amp;key={api_key}\"\n\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n\n        data = response.json()\n        temp = data.get(\"temperature\")\n        condition = data.get(\"condition\")\n\n        return f\"Weather in {city}: {temp}\u00b0C, {condition}\"\n\n    except requests.RequestException as e:\n        return f\"Error fetching weather: {str(e)}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"guides/custom-tools/#tool-with-state","title":"Tool with State","text":"<pre><code>class DatabaseTool:\n    def __init__(self):\n        self.cache = {}\n\n    def create_tool(self, agent):\n        @agent.tool()\n        def query_database(query: str) -&gt; str:\n            \"\"\"Query the database\"\"\"\n            # Check cache\n            if query in self.cache:\n                return f\"Cached: {self.cache[query]}\"\n\n            # Simulate database query\n            result = f\"Result for: {query}\"\n            self.cache[query] = result\n            return result\n\n        return query_database\n\n# Usage\nagent = ReactAgent(name=\"DB Agent\")\ndb_tool = DatabaseTool()\ndb_tool.create_tool(agent)\n</code></pre>"},{"location":"guides/custom-tools/#async-tool-future-support","title":"Async Tool (Future Support)","text":"<pre><code>import asyncio\n\n@agent.tool()\ndef fetch_data(url: str) -&gt; str:\n    \"\"\"Fetch data from URL\"\"\"\n    # For now, use sync wrapper\n    async def _fetch():\n        # async implementation\n        pass\n\n    # Run in event loop\n    loop = asyncio.get_event_loop()\n    result = loop.run_until_complete(_fetch())\n    return result\n</code></pre>"},{"location":"guides/custom-tools/#best-practices","title":"Best Practices","text":""},{"location":"guides/custom-tools/#1-clear-docstrings","title":"1. Clear Docstrings","text":"<p>The LLM uses docstrings to understand when to use your tool:</p> <pre><code># \u2705 Good - clear and specific\n@agent.tool()\ndef send_email(recipient: str, subject: str, body: str) -&gt; str:\n    \"\"\"\n    Send an email to a recipient.\n\n    Args:\n        recipient: Email address\n        subject: Email subject line\n        body: Email message content\n\n    Returns:\n        Success or error message\n    \"\"\"\n    # Implementation\n    pass\n\n# \u274c Bad - vague\n@agent.tool()\ndef send_email(recipient: str, subject: str, body: str) -&gt; str:\n    \"\"\"Send email\"\"\"\n    pass\n</code></pre>"},{"location":"guides/custom-tools/#2-always-return-strings","title":"2. Always Return Strings","text":"<p>Tools should return strings for the LLM to interpret:</p> <pre><code># \u2705 Good\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    result = eval(expression)\n    return f\"Result: {result}\"\n\n# \u274c Bad - returns number\n@agent.tool()\ndef calculate(expression: str) -&gt; float:\n    return eval(expression)  # LLM expects string!\n</code></pre>"},{"location":"guides/custom-tools/#3-handle-all-errors","title":"3. Handle All Errors","text":"<p>Never let exceptions crash the agent:</p> <pre><code>@agent.tool()\ndef risky_operation(input: str) -&gt; str:\n    \"\"\"Perform a risky operation\"\"\"\n    try:\n        # Risky code\n        result = perform_operation(input)\n        return f\"Success: {result}\"\n\n    except ValueError as e:\n        return f\"Validation error: {str(e)}\"\n    except ConnectionError as e:\n        return f\"Connection failed: {str(e)}\"\n    except Exception as e:\n        return f\"Unexpected error: {str(e)}\"\n</code></pre>"},{"location":"guides/custom-tools/#4-use-type-hints","title":"4. Use Type Hints","text":"<pre><code>from typing import List, Dict, Optional\n\n@agent.tool()\ndef process_data(\n    items: str,  # Tools receive strings from LLM\n    operation: str\n) -&gt; str:\n    \"\"\"Process a list of items\"\"\"\n    # Parse string input\n    item_list = items.split(\",\")\n\n    # Type hints help with internal logic\n    results: List[str] = []\n\n    for item in item_list:\n        # Process each item\n        results.append(f\"Processed: {item}\")\n\n    return \", \".join(results)\n</code></pre>"},{"location":"guides/custom-tools/#5-descriptive-tool-names","title":"5. Descriptive Tool Names","text":"<pre><code># \u2705 Good - clear purpose\n@agent.tool(name=\"convert_celsius_to_fahrenheit\")\ndef convert_temp(celsius: str) -&gt; str:\n    pass\n\n# \u274c Bad - vague\n@agent.tool(name=\"convert\")\ndef convert_temp(celsius: str) -&gt; str:\n    pass\n</code></pre>"},{"location":"guides/custom-tools/#6-input-validation","title":"6. Input Validation","text":"<pre><code>@agent.tool()\ndef book_flight(details: str) -&gt; str:\n    \"\"\"Book a flight. Format: 'FROM to TO on DATE'\"\"\"\n    try:\n        # Parse and validate\n        parts = details.split()\n        if len(parts) != 5 or parts[1].lower() != \"to\" or parts[3].lower() != \"on\":\n            return \"Invalid format. Use: 'FROM to TO on DATE'\"\n\n        origin = parts[0]\n        destination = parts[2]\n        date = parts[4]\n\n        # Validate date format\n        from datetime import datetime\n        try:\n            datetime.strptime(date, \"%Y-%m-%d\")\n        except ValueError:\n            return \"Invalid date. Use YYYY-MM-DD format\"\n\n        # Book flight\n        return f\"Flight booked: {origin} \u2192 {destination} on {date}\"\n\n    except Exception as e:\n        return f\"Booking error: {str(e)}\"\n</code></pre>"},{"location":"guides/custom-tools/#testing-your-tools","title":"Testing Your Tools","text":"<p>Test tools independently before using with agents:</p> <pre><code># Create agent and tool\nagent = ReactAgent(name=\"Test Agent\")\n\n@agent.tool()\ndef my_tool(input: str) -&gt; str:\n    \"\"\"Test tool\"\"\"\n    return f\"Processed: {input}\"\n\n# Test directly\nresult = my_tool(\"test input\")\nprint(result)  # \"Processed: test input\"\n\n# Test with agent\nanswer = agent.run(\"Use my_tool with input 'hello'\")\nprint(answer)\n</code></pre>"},{"location":"guides/custom-tools/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/custom-tools/#data-fetcher","title":"Data Fetcher","text":"<pre><code>@agent.tool()\ndef fetch_user_data(user_id: str) -&gt; str:\n    \"\"\"Get user information by ID\"\"\"\n    # Fetch from database/API\n    user = get_user_from_db(user_id)\n    return f\"User {user_id}: {user.name}, {user.email}\"\n</code></pre>"},{"location":"guides/custom-tools/#calculator","title":"Calculator","text":"<pre><code>@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Evaluate mathematical expression\"\"\"\n    try:\n        result = eval(expression, {\"__builtins__\": {}}, {})\n        return f\"{expression} = {result}\"\n    except:\n        return \"Invalid expression\"\n</code></pre>"},{"location":"guides/custom-tools/#formatter","title":"Formatter","text":"<pre><code>@agent.tool()\ndef format_json(data: str) -&gt; str:\n    \"\"\"Format JSON data\"\"\"\n    import json\n    try:\n        obj = json.loads(data)\n        formatted = json.dumps(obj, indent=2)\n        return formatted\n    except:\n        return \"Invalid JSON\"\n</code></pre>"},{"location":"guides/custom-tools/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Use Built-in Tools</p> <p>Explore available built-in tools</p> <p> Built-in Tools</p> </li> <li> <p> MCP Integration</p> <p>Connect to external tool servers</p> <p> MCP Integration</p> </li> <li> <p>:material-code: Examples</p> <p>See complete examples</p> <p> Custom Tools Example</p> </li> </ul>"},{"location":"guides/deployment/","title":"Deployment","text":"<p>Guide coming soon. See Examples for now.</p>"},{"location":"guides/memory-backends/","title":"Memory-backends","text":"<p>Guide coming soon. See Examples for now.</p>"}]}