{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReAct Agent Framework","text":"<p> Complete AI agent framework with MCP support, environments, reasoning strategies, objectives, memory, and built-in tools </p> <p> </p> <p> Getting Started View on GitHub </p>"},{"location":"#what-is-react","title":"What is ReAct?","text":"<p>ReAct (Reasoning + Acting) is a powerful agent pattern that combines:</p> <ul> <li>\ud83d\udcad Thought (Reasoning): Think about what to do next</li> <li>\u26a1 Action (Acting): Execute actions using available tools</li> <li>\ud83d\udc41\ufe0f Observation: Analyze the results and learn</li> </ul> <p>This cycle continues until the agent has enough information to provide a complete answer.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Multi-Provider Support</p> <p>Support for OpenAI, Anthropic, Google Gemini, and Ollama</p> <pre><code>agent = ReactAgent(provider=\"anthropic://claude-3-5-sonnet\")\n</code></pre> </li> <li> <p> Built-in Tools</p> <p>Search, filesystem, computation, and more</p> <pre><code>agent.use_tools(\"search.*\", \"filesystem.*\")\n</code></pre> </li> <li> <p> Memory Systems</p> <p>Simple, ChromaDB, and FAISS memory backends</p> <pre><code>agent = ReactAgent(memory=ChromaMemory())\n</code></pre> </li> <li> <p> Objectives System</p> <p>Goal-oriented agent management with tracking</p> <pre><code>agent.objectives.add(Objective(goal=\"Complete task\"))\n</code></pre> </li> <li> <p> Reasoning Strategies</p> <p>ReAct, ReWOO, Reflection, and Plan-Execute</p> <pre><code>reasoning = ReActReasoning(agent, tools)\n</code></pre> </li> <li> <p> Environment Interaction</p> <p>Web, CLI, and filesystem environments</p> <pre><code>env = WebEnvironment()\nenv.step(Action(\"navigate\", {\"url\": \"...\"}))\n</code></pre> </li> <li> <p> MCP Integration</p> <p>Connect to Model Context Protocol servers</p> <pre><code>agent.add_mcp_server(\"npx\", [\"-y\", \"@mcp/server-filesystem\"])\n</code></pre> </li> <li> <p> FastAPI-Style API</p> <p>Elegant and intuitive agent creation</p> <pre><code>@agent.tool()\ndef search(query: str) -&gt; str:\n    return results\n</code></pre> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install react-agent-framework\n</code></pre>"},{"location":"#your-first-agent","title":"Your First Agent","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create an agent\nagent = ReactAgent(\n    name=\"Assistant\",\n    description=\"A helpful AI assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Add tools with decorators\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search the internet for information\"\"\"\n    # Your search implementation\n    return search_results\n\n# Run the agent\nanswer = agent.run(\"What is the capital of France?\")\nprint(answer)  # \"The capital of France is Paris\"\n</code></pre> <p>That's it! You've created your first ReAct agent. </p>"},{"location":"#why-react-agent-framework","title":"Why ReAct Agent Framework?","text":""},{"location":"#simple-and-powerful","title":"Simple and Powerful","text":"<p>Clean, FastAPI-inspired API that makes building agents a breeze:</p> <pre><code>agent = ReactAgent(name=\"Research Agent\")\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for information\"\"\"\n    return results\n\nanswer = agent.run(\"Research quantum computing\")\n</code></pre>"},{"location":"#plug-and-play","title":"Plug and Play","text":"<p>Switch between AI providers with a single line:</p> OpenAIAnthropicGoogleOllama <pre><code>agent = ReactAgent(provider=\"gpt-4o-mini\")\n</code></pre> <pre><code>agent = ReactAgent(provider=\"anthropic://claude-3-5-sonnet\")\n</code></pre> <pre><code>agent = ReactAgent(provider=\"google://gemini-1.5-flash\")\n</code></pre> <pre><code>agent = ReactAgent(provider=\"ollama://llama3.2\")\n</code></pre>"},{"location":"#batteries-included","title":"Batteries Included","text":"<p>Built-in tools for common tasks:</p> <pre><code># Use all search tools\nagent.use_tools(\"search.*\")\n\n# Use filesystem tools\nagent.use_tools(\"filesystem.read\", \"filesystem.write\")\n\n# Use computation tools\nagent.use_tools(\"computation.calculator\")\n\n# Or use everything\nagent.use_tools(\"*\")\n</code></pre>"},{"location":"#advanced-memory","title":"Advanced Memory","text":"<p>Multiple memory backends for context retention:</p> <pre><code>from react_agent_framework.core.memory import ChromaMemory, FAISSMemory\n\n# Vector-based memory with ChromaDB\nagent = ReactAgent(memory=ChromaMemory(collection_name=\"my_agent\"))\n\n# Or FAISS for high-performance similarity search\nagent = ReactAgent(memory=FAISSMemory(dimension=1536))\n</code></pre>"},{"location":"#goal-oriented","title":"Goal-Oriented","text":"<p>Track and pursue objectives:</p> <pre><code>from react_agent_framework.core.objectives import Objective, Priority\n\nagent.objectives.add(Objective(\n    goal=\"Research climate change solutions\",\n    priority=Priority.HIGH,\n    success_criteria=[\"Find 5 viable solutions\", \"Analyze feasibility\"]\n))\n\n# Agent keeps objectives in mind while working\nanswer = agent.run(\"Help me with climate research\")\n</code></pre>"},{"location":"#multiple-reasoning-strategies","title":"Multiple Reasoning Strategies","text":"<p>Choose how your agent thinks:</p> <pre><code>from react_agent_framework.core.reasoning import (\n    ReActReasoning,      # Iterative thought-action-observation\n    ReWOOReasoning,      # Plan all actions upfront\n    ReflectionReasoning, # Self-critique and improve\n    PlanExecuteReasoning # Adaptive planning\n)\n\nreasoning = ReActReasoning(agent, tools)\nresult = reasoning.reason(\"Complex problem to solve\")\n</code></pre>"},{"location":"#environment-interaction","title":"Environment Interaction","text":"<p>Agents can interact with different environments:</p> <pre><code>from react_agent_framework.core.environment import (\n    WebEnvironment,   # Browser automation\n    CLIEnvironment,   # Shell commands\n    FileEnvironment   # File operations\n)\n\n# Web browsing\nweb_env = WebEnvironment()\nweb_env.step(Action(\"navigate\", {\"url\": \"https://example.com\"}))\n\n# Safe shell execution\ncli_env = CLIEnvironment(safe_mode=True)\ncli_env.step(Action(\"execute\", {\"command\": \"ls -la\"}))\n</code></pre>"},{"location":"#mcp-integration","title":"MCP Integration","text":"<p>Connect to external tool servers:</p> <pre><code># Connect to filesystem MCP server\nagent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"],\n    name=\"filesystem\"\n)\n\n# Connect to GitHub MCP server\nagent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-github\"],\n    env={\"GITHUB_TOKEN\": \"ghp_...\"},\n    name=\"github\"\n)\n\n# All MCP tools are automatically available!\n</code></pre>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li> <p> 5-Minute Quickstart</p> <p>Get up and running in minutes</p> <p> Quickstart</p> </li> <li> <p> Feature Guides</p> <p>Deep dive into all features</p> <p> Features</p> </li> <li> <p> API Reference</p> <p>Complete API documentation</p> <p> API</p> </li> <li> <p> Examples</p> <p>Real-world usage examples</p> <p> Examples</p> </li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li> GitHub Repository</li> <li> Report Issues</li> <li> Contact</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p> <p> Built with :heart: using ReAct Agent Framework </p> <p> Get Started Now </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to ReAct Agent Framework are documented here.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#090-2025-01-07","title":"[0.9.0] - 2025-01-07","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>MCP Integration: Full support for Model Context Protocol</li> <li><code>MCPClient</code> for managing server connections</li> <li><code>MCPToolAdapter</code> for tool integration</li> <li><code>MCPConfigManager</code> for server configuration</li> <li><code>add_mcp_server()</code> method in ReactAgent</li> <li>Support for popular MCP servers (filesystem, github, postgres, etc.)</li> <li>MCP demo example in <code>examples/mcp_demo.py</code></li> <li>Complete documentation site with Material for MkDocs</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated package description to include MCP support</li> <li>Enhanced ReactAgent with MCP methods</li> </ul>"},{"location":"changelog/#080-2025-01-06","title":"[0.8.0] - 2025-01-06","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Environment System: Agent-environment interaction framework</li> <li><code>BaseEnvironment</code> abstract class</li> <li><code>WebEnvironment</code> for browser automation</li> <li><code>CLIEnvironment</code> for shell command execution</li> <li><code>FileEnvironment</code> for file operations</li> <li><code>EnvironmentState</code> for state tracking</li> <li>Safe mode for all environments</li> </ul>"},{"location":"changelog/#070-2025-01-06","title":"[0.7.0] - 2025-01-06","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Reasoning Strategies: Multiple reasoning approaches</li> <li><code>ReActReasoning</code>: Iterative thought-action-observation</li> <li><code>ReWOOReasoning</code>: Plan-then-execute (Reasoning Without Observation)</li> <li><code>ReflectionReasoning</code>: Self-critique and improve</li> <li><code>PlanExecuteReasoning</code>: Adaptive planning with updates</li> <li><code>BaseReasoning</code> abstract class</li> <li><code>ReasoningResult</code> dataclass</li> </ul>"},{"location":"changelog/#060-2025-01-05","title":"[0.6.0] - 2025-01-05","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Objectives System: Goal-oriented agent management</li> <li><code>Objective</code> class with priority levels</li> <li><code>ObjectiveTracker</code> for managing multiple objectives</li> <li>Progress tracking and status management</li> <li>Success criteria support</li> <li>Integration with ReactAgent</li> </ul>"},{"location":"changelog/#050-2025-01-05","title":"[0.5.0] - 2025-01-05","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Memory Systems: Context retention across conversations</li> <li><code>SimpleMemory</code>: In-memory conversation history</li> <li><code>ChromaMemory</code>: Vector-based memory with ChromaDB</li> <li><code>FAISSMemory</code>: High-performance similarity search</li> <li><code>BaseMemory</code> abstract class</li> </ul>"},{"location":"changelog/#040-2025-01-04","title":"[0.4.0] - 2025-01-04","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Built-in Tools System: Registry-based tool management</li> <li><code>ToolRegistry</code> for discovering and managing tools</li> <li><code>use_tools()</code> method with pattern matching</li> <li>Filesystem tools (read, write, list, delete)</li> <li>Computation tools (calculator, code executor, shell)</li> <li>Search tools (DuckDuckGo)</li> </ul>"},{"location":"changelog/#030-2025-01-04","title":"[0.3.0] - 2025-01-04","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Multi-Provider Support: Support for multiple LLM providers</li> <li>OpenAI (default)</li> <li>Anthropic Claude</li> <li>Google Gemini</li> <li>Ollama (local)</li> <li><code>BaseLLMProvider</code> abstract class</li> <li>Provider factory for easy switching</li> </ul>"},{"location":"changelog/#020-2025-01-03","title":"[0.2.0] - 2025-01-03","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>FastAPI-style API with decorators</li> <li><code>@agent.tool()</code> decorator for registering tools</li> <li>Rich configuration options</li> <li>Type hints throughout</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved API design</li> <li>Better error handling</li> </ul>"},{"location":"changelog/#010-2025-01-02","title":"[0.1.0] - 2025-01-02","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Initial release</li> <li>Basic ReactAgent implementation</li> <li>ReAct pattern (Reasoning + Acting)</li> <li>OpenAI integration</li> <li>CLI with Typer and Rich</li> <li>Basic examples</li> </ul>"},{"location":"changelog/#future-releases","title":"Future Releases","text":""},{"location":"changelog/#planned-for-100","title":"Planned for 1.0.0","text":"<ul> <li>Stable API</li> <li>Comprehensive test coverage (&gt;80%)</li> <li>Full CI/CD pipeline</li> <li>PyPI publication</li> <li>Production-ready documentation</li> </ul>"},{"location":"changelog/#under-consideration","title":"Under Consideration","text":"<ul> <li>More LLM providers</li> <li>Additional reasoning strategies</li> <li>Advanced tool system</li> <li>Plugin architecture</li> <li>Web UI for agent monitoring</li> </ul> <p>For detailed changes, see GitHub Releases.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to ReAct Agent Framework!</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Found a bug? Open an issue with:</p> <ul> <li>Clear description</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Python version and environment</li> </ul>"},{"location":"contributing/#suggest-features","title":"Suggest Features","text":"<p>Have an idea? Open an issue with:</p> <ul> <li>Feature description</li> <li>Use case</li> <li>Proposed implementation (optional)</li> </ul>"},{"location":"contributing/#submit-code","title":"Submit Code","text":"<ol> <li>Fork the repository</li> <li>Create a branch (<code>git checkout -b feature/MyFeature</code>)</li> <li>Make your changes</li> <li>Run tests and linting</li> <li>Commit (<code>git commit -m 'Add MyFeature'</code>)</li> <li>Push (<code>git push origin feature/MyFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<pre><code># Clone your fork\ngit clone https://github.com/YOUR_USERNAME/react-agent-framework.git\ncd react-agent-framework\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate\n\n# Install in editable mode with dev dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"contributing/#code-quality","title":"Code Quality","text":""},{"location":"contributing/#format-code","title":"Format Code","text":"<pre><code>black react_agent_framework/\n</code></pre>"},{"location":"contributing/#lint-code","title":"Lint Code","text":"<pre><code>ruff check react_agent_framework/\n</code></pre>"},{"location":"contributing/#type-check","title":"Type Check","text":"<pre><code>mypy react_agent_framework/ --ignore-missing-imports\n</code></pre>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow Conventional Commits:</p> <ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix</li> <li><code>docs:</code> Documentation</li> <li><code>refactor:</code> Code refactoring</li> <li><code>test:</code> Tests</li> <li><code>chore:</code> Maintenance</li> </ul> <p>Example: <pre><code>feat: add support for Google Gemini provider\n\nAdds GoogleProvider class with proper integration\n</code></pre></p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Keep PRs focused on a single feature/fix</li> <li>Add tests for new features</li> <li>Update documentation</li> <li>Ensure CI passes</li> <li>Link related issues</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"api-reference/environments/","title":"Environments API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/mcp/","title":"Mcp API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/memory/","title":"Memory API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/objectives/","title":"Objectives API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/providers/","title":"Providers API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/react-agent/","title":"React-agent API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/reasoning/","title":"Reasoning API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"api-reference/tools/","title":"Tools API Reference","text":"<p>API documentation coming soon.</p> <p>See source code in <code>react_agent_framework/</code> for now.</p>"},{"location":"examples/advanced/","title":"Advanced","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"examples/basic-usage/","title":"Basic-usage","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"examples/data-analysis/","title":"Data-analysis","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"examples/web-research/","title":"Web-research","text":"<p>Example coming soon.</p> <p>See <code>react_agent_framework/examples/</code> for code examples.</p>"},{"location":"features/built-in-tools/","title":"Built-in Tools","text":"<p>ReAct Agent Framework comes with a rich set of built-in tools that agents can use out of the box.</p>"},{"location":"features/built-in-tools/#overview","title":"Overview","text":"<p>Built-in tools are organized into categories and can be registered using pattern matching:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Assistant\")\n\n# Register specific tool\nagent.use_tools(\"search.duckduckgo\")\n\n# Register all tools in a category\nagent.use_tools(\"filesystem.*\")\n\n# Register all available tools\nagent.use_tools(\"*\")\n</code></pre>"},{"location":"features/built-in-tools/#available-tools","title":"Available Tools","text":""},{"location":"features/built-in-tools/#search-tools","title":"Search Tools","text":"<p>Search the web for information using DuckDuckGo.</p>"},{"location":"features/built-in-tools/#searchduckduckgo","title":"<code>search.duckduckgo</code>","text":"<p>Search the internet for current information.</p> <p>Example:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Research Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Register search tool\nagent.use_tools(\"search.duckduckgo\")\n\n# Agent can now search the web\nanswer = agent.run(\"What is the latest version of Python?\", verbose=True)\nprint(answer)\n</code></pre> <p>Output: <pre><code>============================================================\nITERATION 1\n============================================================\n\nThought: I need to search for the latest Python version\nAction: search_duckduckgo\nAction Input: latest Python version 2024\n\nObservation: Python 3.12 is the latest stable version...\n\nThought: I have the information\nAction: finish\nAction Input: The latest version of Python is 3.12\n\n============================================================\nAnswer: The latest version of Python is 3.12\n</code></pre></p>"},{"location":"features/built-in-tools/#filesystem-tools","title":"Filesystem Tools","text":"<p>Interact with the local filesystem safely.</p>"},{"location":"features/built-in-tools/#filesystemread","title":"<code>filesystem.read</code>","text":"<p>Read contents of a file.</p>"},{"location":"features/built-in-tools/#filesystemwrite","title":"<code>filesystem.write</code>","text":"<p>Write content to a file.</p>"},{"location":"features/built-in-tools/#filesystemlist","title":"<code>filesystem.list</code>","text":"<p>List files in a directory.</p>"},{"location":"features/built-in-tools/#filesystemdelete","title":"<code>filesystem.delete</code>","text":"<p>Delete a file (use with caution!).</p> <p>Example:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"File Assistant\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Register all filesystem tools\nagent.use_tools(\"filesystem.*\")\n\n# List Python files\nanswer = agent.run(\"List all Python files in the current directory\")\nprint(answer)\n</code></pre> <p>Example Output: <pre><code>Found 5 Python files:\n- main.py\n- agent.py\n- tools.py\n- config.py\n- __init__.py\n</code></pre></p> <p>Read and Write Example:</p> <pre><code>agent = ReactAgent(name=\"File Manager\")\nagent.use_tools(\"filesystem.read\", \"filesystem.write\")\n\n# Read a file\nanswer = agent.run(\"Read the contents of README.md\")\n\n# Write to a file\nanswer = agent.run(\"Write 'Hello World' to test.txt\")\n</code></pre> <p>Safety</p> <p>Filesystem tools have built-in safety features:</p> <ul> <li>Cannot delete system files</li> <li>Cannot modify protected directories</li> <li>Requires confirmation for destructive operations</li> </ul>"},{"location":"features/built-in-tools/#computation-tools","title":"Computation Tools","text":"<p>Perform calculations and execute code safely.</p>"},{"location":"features/built-in-tools/#computationcalculator","title":"<code>computation.calculator</code>","text":"<p>Evaluate mathematical expressions.</p>"},{"location":"features/built-in-tools/#computationcode_executor","title":"<code>computation.code_executor</code>","text":"<p>Execute Python code safely (sandboxed).</p>"},{"location":"features/built-in-tools/#computationshell","title":"<code>computation.shell</code>","text":"<p>Execute shell commands (with restrictions).</p> <p>Calculator Example:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Math Assistant\",\n    provider=\"gpt-4o-mini\",\n    temperature=0  # Deterministic for calculations\n)\n\n# Register calculator\nagent.use_tools(\"computation.calculator\")\n\n# Perform calculations\nanswer = agent.run(\"What is 25 * 4 + 100 / 2?\")\nprint(answer)  # \"150\"\n</code></pre> <p>Complex Calculation:</p> <pre><code>agent = ReactAgent(name=\"Calculator\")\nagent.use_tools(\"computation.calculator\")\n\nanswer = agent.run(\"\"\"\nCalculate the compound interest for:\n- Principal: $1000\n- Rate: 5% per year\n- Time: 10 years\n- Compounded annually\n\nUse the formula: A = P(1 + r)^t\n\"\"\")\n\nprint(answer)  # Approximately $1628.89\n</code></pre>"},{"location":"features/built-in-tools/#pattern-matching","title":"Pattern Matching","text":"<p>Use glob-style patterns to register multiple tools:</p>"},{"location":"features/built-in-tools/#register-all-tools-in-category","title":"Register All Tools in Category","text":"<pre><code># All search tools\nagent.use_tools(\"search.*\")\n\n# All filesystem tools\nagent.use_tools(\"filesystem.*\")\n\n# All computation tools\nagent.use_tools(\"computation.*\")\n</code></pre>"},{"location":"features/built-in-tools/#register-specific-tools","title":"Register Specific Tools","text":"<pre><code># Just calculator and file list\nagent.use_tools(\n    \"computation.calculator\",\n    \"filesystem.list\"\n)\n</code></pre>"},{"location":"features/built-in-tools/#register-everything","title":"Register Everything","text":"<pre><code># All available tools\nagent.use_tools(\"*\")\n\n# Check what was registered\ntools = agent.get_tools()\nprint(f\"Registered {len(tools)} tools:\")\nfor name in tools:\n    print(f\"  - {name}\")\n</code></pre>"},{"location":"features/built-in-tools/#complete-example-multi-tool-agent","title":"Complete Example: Multi-Tool Agent","text":"<p>Combine different tool categories:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Multi-Tool Assistant\",\n    provider=\"gpt-4o-mini\",\n    temperature=0\n)\n\n# Register tools from different categories\nagent.use_tools(\n    \"search.duckduckgo\",      # Web search\n    \"computation.calculator\",  # Math\n    \"filesystem.list\"          # File operations\n)\n\n# Complex task using multiple tools\nanswer = agent.run(\"\"\"\n1. Search for the current Python version\n2. Calculate 2024 - 1991 (Python's birth year)\n3. List files in the current directory\n\"\"\", verbose=True)\n\nprint(f\"\\nFinal Answer:\\n{answer}\")\n</code></pre> <p>Expected Output: <pre><code>Final Answer:\n1. Python 3.12 is the current stable version\n2. Python is 33 years old (2024 - 1991 = 33)\n3. Found 5 files in current directory: main.py, README.md, ...\n</code></pre></p>"},{"location":"features/built-in-tools/#tool-registry-api","title":"Tool Registry API","text":""},{"location":"features/built-in-tools/#list-available-tools","title":"List Available Tools","text":"<pre><code>from react_agent_framework.tools.registry import ToolRegistry\n\n# Find all tools matching pattern\nsearch_tools = ToolRegistry.find_tools(\"search.*\")\nprint(f\"Found {len(search_tools)} search tools\")\n\n# Find all filesystem tools\nfs_tools = ToolRegistry.find_tools(\"filesystem.*\")\nfor tool in fs_tools:\n    print(f\"- {tool.name}: {tool.description}\")\n</code></pre>"},{"location":"features/built-in-tools/#check-registered-tools","title":"Check Registered Tools","text":"<pre><code>agent = ReactAgent(name=\"Agent\")\nagent.use_tools(\"*\")\n\n# Get all registered tools\ntools = agent.get_tools()\n\n# Print tool names and descriptions\nfor name, description in tools.items():\n    print(f\"{name}:\")\n    print(f\"  {description}\\n\")\n</code></pre>"},{"location":"features/built-in-tools/#best-practices","title":"Best Practices","text":""},{"location":"features/built-in-tools/#1-register-only-needed-tools","title":"1. Register Only Needed Tools","text":"<pre><code># \u274c Bad: Register everything when you only need calculator\nagent.use_tools(\"*\")\n\n# \u2705 Good: Register only what you need\nagent.use_tools(\"computation.calculator\")\n</code></pre>"},{"location":"features/built-in-tools/#2-use-appropriate-temperature","title":"2. Use Appropriate Temperature","text":"<pre><code># For deterministic tasks (math, file operations)\nagent = ReactAgent(\n    name=\"Calculator\",\n    temperature=0  # No randomness\n)\n\n# For creative tasks (research, writing)\nagent = ReactAgent(\n    name=\"Researcher\",\n    temperature=0.7  # More creative\n)\n</code></pre>"},{"location":"features/built-in-tools/#3-handle-errors-gracefully","title":"3. Handle Errors Gracefully","text":"<pre><code>agent = ReactAgent(name=\"File Agent\")\nagent.use_tools(\"filesystem.*\")\n\ntry:\n    answer = agent.run(\"Delete important_file.txt\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"features/built-in-tools/#4-use-verbose-mode-for-debugging","title":"4. Use Verbose Mode for Debugging","text":"<pre><code># See the agent's reasoning process\nanswer = agent.run(\n    \"Calculate 15 * 20\",\n    verbose=True  # Shows thought-action-observation\n)\n</code></pre>"},{"location":"features/built-in-tools/#tool-categories-reference","title":"Tool Categories Reference","text":"Category Tools Description search <code>duckduckgo</code> Web search with DuckDuckGo filesystem <code>read</code>, <code>write</code>, <code>list</code>, <code>delete</code> File and directory operations computation <code>calculator</code>, <code>code_executor</code>, <code>shell</code> Mathematical and code execution"},{"location":"features/built-in-tools/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Create Custom Tools</p> <p>Learn how to create your own tools</p> <p> Custom Tools Guide</p> </li> <li> <p> Add Memory</p> <p>Give your agent memory capabilities</p> <p> Memory Systems</p> </li> <li> <p> Use MCP Servers</p> <p>Connect to external tool servers</p> <p> MCP Integration</p> </li> </ul>"},{"location":"features/built-in-tools/#examples","title":"Examples","text":"<p>For complete, runnable examples, see:</p> <ul> <li>builtin_tools.py - All built-in tools demonstration</li> <li>Basic Usage - Getting started examples</li> <li>Web Research - Research agent example</li> </ul>"},{"location":"features/environments/","title":"Environments","text":"<p>Documentation coming soon. See API Reference for now.</p>"},{"location":"features/environments/#quick-example","title":"Quick Example","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Agent\")\n# Examples coming soon\n</code></pre>"},{"location":"features/mcp-integration/","title":"MCP Integration","text":"<p>Connect your agents to Model Context Protocol (MCP) servers to access external tools dynamically.</p>"},{"location":"features/mcp-integration/#what-is-mcp","title":"What is MCP?","text":"<p>Model Context Protocol (MCP) is Anthropic's open standard for connecting AI assistants to data sources and tools.</p>"},{"location":"features/mcp-integration/#benefits","title":"Benefits","text":"<ul> <li> Connect to external tool servers</li> <li> Auto-discover available tools</li> <li> Secure tool execution</li> <li> Works with any MCP-compatible server</li> </ul>"},{"location":"features/mcp-integration/#installation","title":"Installation","text":"<pre><code>pip install react-agent-framework[mcp]\n</code></pre>"},{"location":"features/mcp-integration/#basic-usage","title":"Basic Usage","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(name=\"MCP Agent\")\n\n# Connect to filesystem MCP server\nserver_id = agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"],\n    name=\"filesystem\"\n)\n\n# All tools from the server are now available!\nanswer = agent.run(\"List files in the /tmp directory\")\n</code></pre>"},{"location":"features/mcp-integration/#popular-mcp-servers","title":"Popular MCP Servers","text":""},{"location":"features/mcp-integration/#filesystem-server","title":"Filesystem Server","text":"<p>Access local files and directories:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/dir\"],\n    name=\"filesystem\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#github-server","title":"GitHub Server","text":"<p>Interact with GitHub repositories:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-github\"],\n    env={\"GITHUB_TOKEN\": \"ghp_your_token\"},\n    name=\"github\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#postgresql-server","title":"PostgreSQL Server","text":"<p>Query databases:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-postgres\"],\n    env={\"POSTGRES_CONNECTION_STRING\": \"postgresql://...\"},\n    name=\"postgres\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#puppeteer-server","title":"Puppeteer Server","text":"<p>Browser automation:</p> <pre><code>agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-puppeteer\"],\n    name=\"puppeteer\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#managing-servers","title":"Managing Servers","text":""},{"location":"features/mcp-integration/#list-connected-servers","title":"List Connected Servers","text":"<pre><code>servers = agent.list_mcp_servers()\nfor server in servers:\n    print(f\"{server['name']}: {server['num_tools']} tools\")\n</code></pre>"},{"location":"features/mcp-integration/#list-available-tools","title":"List Available Tools","text":"<pre><code>tools = agent.list_mcp_tools()\nfor tool_desc in tools:\n    print(tool_desc)\n</code></pre>"},{"location":"features/mcp-integration/#disconnect-from-server","title":"Disconnect from Server","text":"<pre><code>agent.disconnect_mcp_server(server_id)\n</code></pre>"},{"location":"features/mcp-integration/#using-config-files","title":"Using Config Files","text":"<p>Create <code>mcp_config.json</code>:</p> <pre><code>{\n  \"servers\": [\n    {\n      \"name\": \"filesystem\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"],\n      \"auto_connect\": true\n    },\n    {\n      \"name\": \"github\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"ghp_...\"\n      },\n      \"auto_connect\": false\n    }\n  ]\n}\n</code></pre> <p>Load config:</p> <pre><code>from react_agent_framework.mcp.config import MCPConfigManager\n\nconfig_manager = MCPConfigManager(\"mcp_config.json\")\n\nfor server_name in config_manager.list_servers():\n    server_config = config_manager.get_server(server_name)\n    agent.add_mcp_server(\n        command=server_config.command,\n        args=server_config.args,\n        env=server_config.env,\n        name=server_config.name\n    )\n</code></pre>"},{"location":"features/mcp-integration/#complete-example","title":"Complete Example","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(\n    name=\"Multi-Source Agent\",\n    description=\"Agent with access to multiple data sources\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Connect to filesystem\nfs_server = agent.add_mcp_server(\n    command=\"npx\",\n    args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"],\n    name=\"filesystem\"\n)\n\n# Connect to GitHub (if token available)\ntry:\n    gh_server = agent.add_mcp_server(\n        command=\"npx\",\n        args=[\"-y\", \"@modelcontextprotocol/server-github\"],\n        env={\"GITHUB_TOKEN\": \"ghp_...\"},\n        name=\"github\"\n    )\nexcept:\n    print(\"GitHub server not configured\")\n\n# List all available tools\nprint(\"\\nAvailable MCP Tools:\")\nfor tool in agent.list_mcp_tools():\n    print(f\"  - {tool}\")\n\n# Use the agent\ntasks = [\n    \"List all Python files in current directory\",\n    \"Read the contents of README.md\",\n]\n\nfor task in tasks:\n    print(f\"\\nTask: {task}\")\n    result = agent.run(task)\n    print(f\"Result: {result}\")\n\n# Cleanup\nagent.disconnect_mcp_server(fs_server)\n</code></pre>"},{"location":"features/mcp-integration/#creating-custom-mcp-servers","title":"Creating Custom MCP Servers","text":"<p>You can create your own MCP servers. See the MCP Python SDK documentation for details.</p> <p>Example custom server:</p> <pre><code>from mcp import Server, Tool\n\nserver = Server(\"my-custom-server\")\n\n@server.tool()\nasync def my_custom_tool(param: str) -&gt; str:\n    \"\"\"My custom tool\"\"\"\n    return f\"Processed: {param}\"\n\nif __name__ == \"__main__\":\n    server.run()\n</code></pre> <p>Use it:</p> <pre><code>agent.add_mcp_server(\n    command=\"python\",\n    args=[\"my_custom_server.py\"],\n    name=\"custom\"\n)\n</code></pre>"},{"location":"features/mcp-integration/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see:</p> <ul> <li>MCP Client Reference</li> <li>ReactAgent MCP Methods</li> </ul>"},{"location":"features/mcp-integration/#learn-more","title":"Learn More","text":"<ul> <li>Official MCP Documentation</li> <li>MCP Python SDK</li> <li>Available MCP Servers</li> </ul>"},{"location":"features/memory-systems/","title":"Memory Systems","text":"<p>Give your agents the ability to remember conversations and retrieve relevant context.</p>"},{"location":"features/memory-systems/#overview","title":"Overview","text":"<p>Memory systems allow agents to:</p> <ul> <li>Remember previous conversations</li> <li>Retrieve relevant information using semantic search</li> <li>Maintain context across multiple interactions</li> <li>Learn from past experiences</li> </ul> <pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import SimpleMemory\n\nagent = ReactAgent(\n    name=\"Assistant\",\n    memory=SimpleMemory(max_messages=100)\n)\n</code></pre>"},{"location":"features/memory-systems/#available-memory-backends","title":"Available Memory Backends","text":"Backend Type Best For SimpleMemory In-memory buffer Development, simple bots ChromaMemory Vector database Production, semantic search FAISSMemory High-performance Large-scale, fast retrieval"},{"location":"features/memory-systems/#simplememory","title":"SimpleMemory","text":"<p>In-memory conversation history with keyword matching.</p>"},{"location":"features/memory-systems/#basic-usage","title":"Basic Usage","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import SimpleMemory\n\n# Create agent with memory\nagent = ReactAgent(\n    name=\"Memory Assistant\",\n    memory=SimpleMemory(max_messages=50)\n)\n\n# Add a tool\n@agent.tool()\ndef calculate(expression: str) -&gt; str:\n    \"\"\"Calculate mathematical expressions\"\"\"\n    try:\n        return f\"Result: {eval(expression, {'__builtins__': {}}, {})}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Conversation 1\nagent.run(\"My name is Alice\")\n\n# Conversation 2 - Agent remembers!\nanswer = agent.run(\"What is my name?\")\nprint(answer)  # \"Your name is Alice\"\n</code></pre>"},{"location":"features/memory-systems/#features","title":"Features","text":"<p>\u2705 Simple and fast \u2705 No external dependencies \u2705 Good for development \u274c Limited to keyword matching \u274c Lost on restart</p>"},{"location":"features/memory-systems/#chromamemory","title":"ChromaMemory","text":"<p>Vector database with semantic search capabilities.</p>"},{"location":"features/memory-systems/#installation","title":"Installation","text":"<pre><code>pip install react-agent-framework[chroma]\n</code></pre>"},{"location":"features/memory-systems/#usage","title":"Usage","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import ChromaMemory\n\nagent = ReactAgent(\n    name=\"Smart Assistant\",\n    memory=ChromaMemory(\n        collection_name=\"my_agent\",\n        persist_directory=\"./chroma_db\",\n        embedding_function=\"default\"  # or \"openai\"\n    )\n)\n\n# Add knowledge to memory\nagent.memory.add(\"Python was created by Guido van Rossum\", role=\"system\")\nagent.memory.add(\"Python emphasizes code readability\", role=\"system\")\n\n# Semantic search\nresults = agent.memory.search(\"programming language design\", top_k=2)\nfor msg in results:\n    print(msg.content)\n</code></pre>"},{"location":"features/memory-systems/#features_1","title":"Features","text":"<p>\u2705 Semantic search - Finds related content \u2705 Persistent - Survives restarts \u2705 Vector similarity - Better than keywords \u2705 Production-ready</p>"},{"location":"features/memory-systems/#faissmemory","title":"FAISSMemory","text":"<p>High-performance similarity search for large-scale applications.</p>"},{"location":"features/memory-systems/#installation_1","title":"Installation","text":"<pre><code>pip install react-agent-framework[faiss]\n</code></pre>"},{"location":"features/memory-systems/#usage_1","title":"Usage","text":"<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import FAISSMemory\n\nagent = ReactAgent(\n    name=\"Performance Assistant\",\n    memory=FAISSMemory(\n        index_path=\"./faiss_index\",\n        dimension=1536,  # OpenAI embedding size\n        index_type=\"Flat\"  # or \"IVF\", \"HNSW\"\n    )\n)\n\n# Add technical docs\nagent.memory.add(\"Docker enables application containerization\", role=\"system\")\nagent.memory.add(\"Kubernetes orchestrates container deployment\", role=\"system\")\n\n# Fast semantic search\nresults = agent.memory.search(\"container technology\", top_k=2)\n</code></pre>"},{"location":"features/memory-systems/#index-types","title":"Index Types","text":"Type Speed Accuracy Best For Flat Slower 100% &lt;100K vectors IVF Fast ~95% 100K-1M vectors HNSW Very fast ~98% &gt;1M vectors"},{"location":"features/memory-systems/#memory-api","title":"Memory API","text":"<p>All memory backends implement the same interface:</p>"},{"location":"features/memory-systems/#add","title":"add()","text":"<p>Add a message to memory:</p> <pre><code># System message\nagent.memory.add(\"Important context\", role=\"system\")\n\n# User message\nagent.memory.add(\"User question\", role=\"user\")\n\n# Assistant message\nagent.memory.add(\"Assistant answer\", role=\"assistant\")\n</code></pre>"},{"location":"features/memory-systems/#search","title":"search()","text":"<p>Search for relevant messages:</p> <pre><code># Semantic search\nresults = agent.memory.search(\n    query=\"topic to search\",\n    top_k=5,  # Return top 5 results\n    filter_role=\"system\"  # Optional: filter by role\n)\n\nfor msg in results:\n    print(f\"[{msg.role}] {msg.content}\")\n</code></pre>"},{"location":"features/memory-systems/#clear","title":"clear()","text":"<p>Clear all messages:</p> <pre><code>agent.memory.clear()\n</code></pre>"},{"location":"features/memory-systems/#get_stats","title":"get_stats()","text":"<p>Get memory statistics:</p> <pre><code>stats = agent.memory.get_stats()\nprint(f\"Total messages: {stats['total_messages']}\")\nprint(f\"Total tokens: {stats.get('total_tokens', 'N/A')}\")\n</code></pre>"},{"location":"features/memory-systems/#complete-example","title":"Complete Example","text":"<p>Agent that learns from conversations:</p> <pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import ChromaMemory\n\n# Create agent with persistent memory\nagent = ReactAgent(\n    name=\"Learning Assistant\",\n    memory=ChromaMemory(\n        collection_name=\"assistant_memory\",\n        persist_directory=\"./memory_db\"\n    )\n)\n\n# Session 1: Teaching\nagent.run(\"Remember: The capital of France is Paris\")\nagent.run(\"Remember: Python was created in 1991\")\n\n# Session 2: Later (even after restart)\n# Memory is persistent!\nanswer = agent.run(\"What's the capital of France?\")\nprint(answer)  # \"Paris\"\n\nanswer = agent.run(\"When was Python created?\")\nprint(answer)  # \"1991\"\n</code></pre>"},{"location":"features/memory-systems/#choosing-a-memory-backend","title":"Choosing a Memory Backend","text":""},{"location":"features/memory-systems/#use-simplememory-when","title":"Use SimpleMemory when:","text":"<ul> <li>\ud83d\ude80 Starting development</li> <li>\ud83d\udcbb Building simple chatbots</li> <li>\ud83d\udd27 Testing and prototyping</li> <li>\u26a1 Don't need persistence</li> </ul>"},{"location":"features/memory-systems/#use-chromamemory-when","title":"Use ChromaMemory when:","text":"<ul> <li>\ud83c\udfe2 Building production applications</li> <li>\ud83d\udd0d Need semantic search</li> <li>\ud83d\udcbe Need persistence</li> <li>\ud83d\udcc8 Moderate scale (&lt;1M messages)</li> </ul>"},{"location":"features/memory-systems/#use-faissmemory-when","title":"Use FAISSMemory when:","text":"<ul> <li>\u26a1 Need maximum performance</li> <li>\ud83d\udcca Large-scale applications (&gt;1M messages)</li> <li>\ud83c\udfaf Accuracy is critical</li> <li>\ud83d\udd2c Research/experimentation</li> </ul>"},{"location":"features/memory-systems/#best-practices","title":"Best Practices","text":""},{"location":"features/memory-systems/#1-initialize-memory-early","title":"1. Initialize Memory Early","text":"<pre><code># \u2705 Good\nagent = ReactAgent(\n    name=\"Agent\",\n    memory=ChromaMemory(collection_name=\"prod\")\n)\n\n# \u274c Bad - harder to add later\nagent = ReactAgent(name=\"Agent\")\n# ... agent.memory = ... (after initialization)\n</code></pre>"},{"location":"features/memory-systems/#2-use-descriptive-collection-names","title":"2. Use Descriptive Collection Names","text":"<pre><code># \u2705 Good\nChromaMemory(collection_name=\"customer_support_agent\")\n\n# \u274c Bad\nChromaMemory(collection_name=\"memory\")\n</code></pre>"},{"location":"features/memory-systems/#3-clean-old-data","title":"3. Clean Old Data","text":"<pre><code># Periodically clear or archive old memories\nif agent.memory.get_stats()['total_messages'] &gt; 10000:\n    # Archive or clear oldest messages\n    agent.memory.clear()\n</code></pre>"},{"location":"features/memory-systems/#4-monitor-memory-usage","title":"4. Monitor Memory Usage","text":"<pre><code>stats = agent.memory.get_stats()\nprint(f\"Memory: {stats['total_messages']} messages\")\n\nif stats['total_messages'] &gt; 1000:\n    print(\"\u26a0\ufe0f  Consider using FAISS for better performance\")\n</code></pre>"},{"location":"features/memory-systems/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Add Objectives</p> <p>Give your agent goals to pursue</p> <p> Objectives System</p> </li> <li> <p> Custom Memory Backends</p> <p>Create your own memory implementation</p> <p> Memory Backends Guide</p> </li> <li> <p> API Reference</p> <p>Complete memory API documentation</p> <p> Memory API</p> </li> </ul>"},{"location":"features/memory-systems/#examples","title":"Examples","text":"<p>Complete runnable examples:</p> <ul> <li>memory_demo.py - All memory backends demonstrated</li> <li>Advanced Examples - Complex memory usage patterns</li> </ul>"},{"location":"features/multi-provider/","title":"Multi-Provider Support","text":"<p>ReAct Agent Framework supports multiple AI providers, allowing you to switch between OpenAI, Anthropic, Google, and Ollama seamlessly.</p>"},{"location":"features/multi-provider/#supported-providers","title":"Supported Providers","text":""},{"location":"features/multi-provider/#openai-default","title":"OpenAI (Default)","text":"<pre><code>agent = ReactAgent(provider=\"gpt-4o-mini\")\nagent = ReactAgent(provider=\"gpt-4\")\n</code></pre>"},{"location":"features/multi-provider/#anthropic-claude","title":"Anthropic Claude","text":"<pre><code>agent = ReactAgent(provider=\"anthropic://claude-3-5-sonnet-20241022\")\nagent = ReactAgent(provider=\"anthropic://claude-3-opus-20240229\")\n</code></pre>"},{"location":"features/multi-provider/#google-gemini","title":"Google Gemini","text":"<pre><code>agent = ReactAgent(provider=\"google://gemini-1.5-flash\")\nagent = ReactAgent(provider=\"google://gemini-1.5-pro\")\n</code></pre>"},{"location":"features/multi-provider/#ollama-local","title":"Ollama (Local)","text":"<pre><code>agent = ReactAgent(provider=\"ollama://llama3.2\")\nagent = ReactAgent(provider=\"ollama://mistral\")\n</code></pre>"},{"location":"features/multi-provider/#configuration","title":"Configuration","text":"<p>Set API keys in <code>.env</code>:</p> <pre><code>OPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-ant-...\nGOOGLE_API_KEY=AI...\n</code></pre>"},{"location":"features/multi-provider/#learn-more","title":"Learn More","text":"<p>See API Reference for details.</p>"},{"location":"features/objectives/","title":"Objectives","text":"<p>Documentation coming soon. See API Reference for now.</p>"},{"location":"features/objectives/#quick-example","title":"Quick Example","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Agent\")\n# Examples coming soon\n</code></pre>"},{"location":"features/reasoning-strategies/","title":"Reasoning-strategies","text":"<p>Documentation coming soon. See API Reference for now.</p>"},{"location":"features/reasoning-strategies/#quick-example","title":"Quick Example","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Agent\")\n# Examples coming soon\n</code></pre>"},{"location":"getting-started/first-agent/","title":"Your First Agent","text":"<p>Build a complete agent step-by-step and learn best practices.</p>"},{"location":"getting-started/first-agent/#project-setup","title":"Project Setup","text":"<p>Create a new project directory:</p> <pre><code>mkdir my-agent-project\ncd my-agent-project\npython -m venv .venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\npip install react-agent-framework\n</code></pre> <p>Create <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=sk-your-key-here\n</code></pre>"},{"location":"getting-started/first-agent/#simple-calculator-agent","title":"Simple Calculator Agent","text":"<p>Let's build a calculator agent that can perform mathematical operations.</p>"},{"location":"getting-started/first-agent/#step-1-create-the-agent","title":"Step 1: Create the Agent","text":"calculator_agent.py<pre><code>from react_agent_framework import ReactAgent\n\n# Create the agent\nagent = ReactAgent(\n    name=\"Calculator\",\n    description=\"A mathematical calculator assistant\",\n    provider=\"gpt-4o-mini\",\n    temperature=0,  # Deterministic for calculations\n    max_iterations=5\n)\n</code></pre>"},{"location":"getting-started/first-agent/#step-2-add-tools","title":"Step 2: Add Tools","text":"<pre><code>@agent.tool()\ndef add(a: float, b: float) -&gt; str:\n    \"\"\"Add two numbers together\"\"\"\n    result = a + b\n    return f\"{a} + {b} = {result}\"\n\n@agent.tool()\ndef subtract(a: float, b: float) -&gt; str:\n    \"\"\"Subtract b from a\"\"\"\n    result = a - b\n    return f\"{a} - {b} = {result}\"\n\n@agent.tool()\ndef multiply(a: float, b: float) -&gt; str:\n    \"\"\"Multiply two numbers\"\"\"\n    result = a * b\n    return f\"{a} \u00d7 {b} = {result}\"\n\n@agent.tool()\ndef divide(a: float, b: float) -&gt; str:\n    \"\"\"Divide a by b\"\"\"\n    if b == 0:\n        return \"Error: Cannot divide by zero\"\n    result = a / b\n    return f\"{a} \u00f7 {b} = {result}\"\n</code></pre>"},{"location":"getting-started/first-agent/#step-3-test-it","title":"Step 3: Test It","text":"<pre><code>if __name__ == \"__main__\":\n    # Test calculations\n    questions = [\n        \"What is 15 plus 27?\",\n        \"Multiply 8 by 9\",\n        \"What is 100 divided by 4?\",\n        \"Calculate 50 minus 23\"\n    ]\n\n    for question in questions:\n        print(f\"\\nQ: {question}\")\n        answer = agent.run(question, verbose=False)\n        print(f\"A: {answer}\")\n</code></pre>"},{"location":"getting-started/first-agent/#research-assistant","title":"Research Assistant","text":"<p>Build a more advanced agent that can search and analyze information.</p> research_agent.py<pre><code>from react_agent_framework import ReactAgent\n\n# Create research agent\nagent = ReactAgent(\n    name=\"Research Assistant\",\n    description=\"An AI that helps with web research and analysis\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Use built-in search tools\nagent.use_tools(\"search.*\")\n\n# Add custom analysis tool\n@agent.tool()\ndef summarize(text: str) -&gt; str:\n    \"\"\"Create a brief summary of the given text\"\"\"\n    # In real implementation, you might use another LLM call or algorithm\n    words = text.split()\n    summary = \" \".join(words[:100])  # Simple truncation\n    return f\"Summary: {summary}...\"\n\n# Use it\nquestion = \"What are the latest developments in quantum computing?\"\nanswer = agent.run(question, verbose=True)\nprint(f\"\\nFinal Answer: {answer}\")\n</code></pre>"},{"location":"getting-started/first-agent/#file-management-agent","title":"File Management Agent","text":"<p>Agent that can work with files and directories.</p> file_agent.py<pre><code>from react_agent_framework import ReactAgent\nfrom pathlib import Path\n\nagent = ReactAgent(\n    name=\"File Manager\",\n    description=\"Helps manage files and directories\",\n    provider=\"gpt-4o-mini\"\n)\n\n# Use filesystem tools\nagent.use_tools(\"filesystem.*\")\n\n# Add custom tool\n@agent.tool()\ndef count_files(directory: str) -&gt; str:\n    \"\"\"Count the number of files in a directory\"\"\"\n    try:\n        path = Path(directory)\n        files = list(path.glob(\"*\"))\n        file_count = len([f for f in files if f.is_file()])\n        dir_count = len([f for f in files if f.is_dir()])\n        return f\"Found {file_count} files and {dir_count} directories in {directory}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Use it\ntasks = [\n    \"List all files in the current directory\",\n    \"Count how many Python files are here\",\n]\n\nfor task in tasks:\n    print(f\"\\nTask: {task}\")\n    result = agent.run(task)\n    print(f\"Result: {result}\")\n</code></pre>"},{"location":"getting-started/first-agent/#multi-purpose-agent","title":"Multi-Purpose Agent","text":"<p>Combine multiple capabilities in one agent.</p> multi_agent.py<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Multi-Purpose Assistant\",\n    description=\"An assistant that can search, calculate, and manage files\",\n    provider=\"gpt-4o-mini\",\n    enable_memory=True  # Remember conversations\n)\n\n# Add all built-in tools\nagent.use_tools(\"*\")\n\n# Add custom tools\n@agent.tool()\ndef create_report(title: str, content: str) -&gt; str:\n    \"\"\"Create a formatted report\"\"\"\n    report = f\"\"\"\n    ={'='*50}\n    REPORT: {title}\n    ={'='*50}\n\n    {content}\n\n    ={'='*50}\n    \"\"\"\n    return report\n\n# Interactive mode\nprint(\"Multi-Purpose Assistant (type 'quit' to exit)\")\nwhile True:\n    query = input(\"\\nYou: \")\n    if query.lower() in ['quit', 'exit', 'bye']:\n        break\n\n    answer = agent.run(query)\n    print(f\"Assistant: {answer}\")\n</code></pre>"},{"location":"getting-started/first-agent/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/first-agent/#1-clear-tool-descriptions","title":"1. Clear Tool Descriptions","text":"<pre><code>@agent.tool()\ndef search_papers(query: str, year: int = 2024) -&gt; str:\n    \"\"\"\n    Search for academic papers.\n\n    Args:\n        query: The search query (topic, keywords, etc.)\n        year: Publication year to filter by (default: 2024)\n\n    Returns:\n        List of relevant papers found\n    \"\"\"\n    # Implementation\n    pass\n</code></pre>"},{"location":"getting-started/first-agent/#2-error-handling","title":"2. Error Handling","text":"<pre><code>@agent.tool()\ndef divide(a: float, b: float) -&gt; str:\n    \"\"\"Divide two numbers\"\"\"\n    try:\n        if b == 0:\n            return \"Error: Cannot divide by zero\"\n        result = a / b\n        return f\"{a} \u00f7 {b} = {result}\"\n    except Exception as e:\n        return f\"Error performing division: {str(e)}\"\n</code></pre>"},{"location":"getting-started/first-agent/#3-type-hints","title":"3. Type Hints","text":"<pre><code>from typing import List, Dict, Optional\n\n@agent.tool()\ndef analyze_data(\n    values: List[float],\n    method: str = \"mean\"\n) -&gt; str:\n    \"\"\"Analyze a list of numerical values\"\"\"\n    # Implementation with proper typing\n    pass\n</code></pre>"},{"location":"getting-started/first-agent/#4-appropriate-temperature","title":"4. Appropriate Temperature","text":"<pre><code># For factual/deterministic tasks\ncalculator = ReactAgent(\n    name=\"Calculator\",\n    temperature=0  # No randomness\n)\n\n# For creative tasks\nwriter = ReactAgent(\n    name=\"Writer\",\n    temperature=0.7  # More creative\n)\n</code></pre>"},{"location":"getting-started/first-agent/#5-iteration-limits","title":"5. Iteration Limits","text":"<pre><code>agent = ReactAgent(\n    name=\"Agent\",\n    max_iterations=10  # Prevent infinite loops\n)\n</code></pre>"},{"location":"getting-started/first-agent/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Try Different Providers</p> <p>Learn about multi-provider support</p> <p> Multi-Provider</p> </li> <li> <p> Add Memory</p> <p>Give your agent memory</p> <p> Memory Systems</p> </li> <li> <p> Set Objectives</p> <p>Make goal-oriented agents</p> <p> Objectives</p> </li> <li> <p> Connect to MCP</p> <p>Use external tool servers</p> <p> MCP Integration</p> </li> </ul>"},{"location":"getting-started/first-agent/#complete-example","title":"Complete Example","text":"<p>Here's a complete, production-ready example:</p> production_agent.py<pre><code>from react_agent_framework import ReactAgent\nfrom react_agent_framework.core.memory import SimpleMemory\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\n\ndef create_agent():\n    \"\"\"Factory function to create configured agent\"\"\"\n    agent = ReactAgent(\n        name=\"Production Assistant\",\n        description=\"A production-ready AI assistant\",\n        provider=\"gpt-4o-mini\",\n        temperature=0.3,\n        max_iterations=10,\n        memory=SimpleMemory(max_messages=100)\n    )\n\n    # Add tools\n    agent.use_tools(\"search.*\", \"computation.*\")\n\n    @agent.tool()\n    def custom_tool(param: str) -&gt; str:\n        \"\"\"Custom tool with proper error handling\"\"\"\n        try:\n            # Your implementation\n            result = f\"Processed: {param}\"\n            return result\n        except Exception as e:\n            logging.error(f\"Tool error: {e}\")\n            return f\"Error: {str(e)}\"\n\n    return agent\n\ndef main():\n    agent = create_agent()\n\n    # Example usage\n    result = agent.run(\n        \"Search for Python best practices and summarize\",\n        verbose=True\n    )\n\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Run it:</p> <pre><code>python production_agent.py\n</code></pre> <p>Congratulations!</p> <p>You've built your first complete agent! Continue exploring the framework's features to build even more powerful agents.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Learn how to install ReAct Agent Framework in your project.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>pip or uv package manager</li> </ul>"},{"location":"getting-started/installation/#install-from-pypi","title":"Install from PyPI","text":"Basic InstallationWith MCP SupportWith All ProvidersWith Memory BackendsEverything <pre><code>pip install react-agent-framework\n</code></pre> <pre><code>pip install react-agent-framework[mcp]\n</code></pre> <pre><code>pip install react-agent-framework[anthropic,google]\n</code></pre> <pre><code>pip install react-agent-framework[chroma,faiss]\n</code></pre> <pre><code>pip install react-agent-framework[all]\n</code></pre>"},{"location":"getting-started/installation/#install-from-source","title":"Install from Source","text":"<p>For development or to get the latest changes:</p> <pre><code># Clone the repository\ngit clone https://github.com/marcosf63/react-agent-framework.git\ncd react-agent-framework\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install in editable mode\npip install -e .\n\n# Or with all extras\npip install -e \".[all]\"\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/installation/#ai-providers","title":"AI Providers","text":"<pre><code># Anthropic Claude\npip install react-agent-framework[anthropic]\n\n# Google Gemini\npip install react-agent-framework[google]\n\n# All providers\npip install react-agent-framework[anthropic,google]\n</code></pre>"},{"location":"getting-started/installation/#memory-backends","title":"Memory Backends","text":"<pre><code># ChromaDB\npip install react-agent-framework[chroma]\n\n# FAISS\npip install react-agent-framework[faiss]\n\n# Both\npip install react-agent-framework[chroma,faiss]\n</code></pre>"},{"location":"getting-started/installation/#mcp-support","title":"MCP Support","text":"<pre><code># Model Context Protocol\npip install react-agent-framework[mcp]\n</code></pre>"},{"location":"getting-started/installation/#development-tools","title":"Development Tools","text":"<pre><code># Development dependencies\npip install react-agent-framework[dev]\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>from react_agent_framework import ReactAgent\n\n# Check version\nimport react_agent_framework\nprint(react_agent_framework.__version__)  # Should print: 0.9.0\n\n# Create a basic agent to test\nagent = ReactAgent(name=\"Test Agent\")\nprint(agent)  # Should print agent info\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#api-keys","title":"API Keys","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># OpenAI (default provider)\nOPENAI_API_KEY=sk-...\n\n# Anthropic (optional)\nANTHROPIC_API_KEY=sk-ant-...\n\n# Google (optional)\nGOOGLE_API_KEY=AI...\n\n# Other services (optional)\nGITHUB_TOKEN=ghp_...\nBRAVE_API_KEY=...\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>The framework automatically loads environment variables from <code>.env</code> files using <code>python-dotenv</code>.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li> Quickstart Guide - Get started in 5 minutes</li> <li> Your First Agent - Build your first agent</li> <li> Features Overview - Explore all features</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#importerror-no-module-named-react_agent_framework","title":"ImportError: No module named 'react_agent_framework'","text":"<p>Make sure you've installed the package:</p> <pre><code>pip install react-agent-framework\n</code></pre>"},{"location":"getting-started/installation/#provider-not-found","title":"Provider not found","text":"<p>Install the specific provider:</p> <pre><code>pip install react-agent-framework[anthropic]  # For Claude\npip install react-agent-framework[google]     # For Gemini\n</code></pre>"},{"location":"getting-started/installation/#mcp-tools-not-working","title":"MCP tools not working","text":"<p>Install MCP support:</p> <pre><code>pip install react-agent-framework[mcp]\n</code></pre> <p>Using Virtual Environments</p> <p>Always use virtual environments to isolate dependencies:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Get up and running with ReAct Agent Framework in 5 minutes!</p>"},{"location":"getting-started/quickstart/#step-1-install","title":"Step 1: Install","text":"<pre><code>pip install react-agent-framework\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-configure-api-key","title":"Step 2: Configure API Key","text":"<p>Create a <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=sk-your-key-here\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-create-your-first-agent","title":"Step 3: Create Your First Agent","text":"<p>Create a file <code>my_agent.py</code>:</p> <pre><code>from react_agent_framework import ReactAgent\n\n# Create agent\nagent = ReactAgent(\n    name=\"Assistant\",\n    description=\"A helpful AI assistant\"\n)\n\n# Add a simple tool\n@agent.tool()\ndef greet(name: str) -&gt; str:\n    \"\"\"Greet someone by name\"\"\"\n    return f\"Hello, {name}! Nice to meet you!\"\n\n# Run the agent\nanswer = agent.run(\"Greet Alice\")\nprint(answer)\n</code></pre>"},{"location":"getting-started/quickstart/#step-4-run-it","title":"Step 4: Run It","text":"<pre><code>python my_agent.py\n</code></pre> <p>Output: <pre><code>Hello, Alice! Nice to meet you!\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-5-add-more-tools","title":"Step 5: Add More Tools","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Calculator Agent\")\n\n@agent.tool()\ndef add(a: float, b: float) -&gt; str:\n    \"\"\"Add two numbers\"\"\"\n    return f\"{a} + {b} = {a + b}\"\n\n@agent.tool()\ndef multiply(a: float, b: float) -&gt; str:\n    \"\"\"Multiply two numbers\"\"\"\n    return f\"{a} \u00d7 {b} = {a * b}\"\n\n# Agent can now use multiple tools\nanswer = agent.run(\"What is 5 plus 3?\")\nprint(answer)  # \"8\"\n\nanswer = agent.run(\"Multiply 4 by 7\")\nprint(answer)  # \"28\"\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-use-built-in-tools","title":"Step 6: Use Built-in Tools","text":"<pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(name=\"Research Agent\")\n\n# Use all search tools\nagent.use_tools(\"search.*\")\n\n# Now agent can search the web\nanswer = agent.run(\"What is the latest news about AI?\")\nprint(answer)\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-try-different-providers","title":"Step 7: Try Different Providers","text":"OpenAI (Default)Anthropic ClaudeGoogle GeminiOllama (Local) <pre><code>agent = ReactAgent(\n    name=\"GPT Agent\",\n    provider=\"gpt-4o-mini\"\n)\n</code></pre> <pre><code>agent = ReactAgent(\n    name=\"Claude Agent\",\n    provider=\"anthropic://claude-3-5-sonnet-20241022\"\n)\n</code></pre> <pre><code>agent = ReactAgent(\n    name=\"Gemini Agent\",\n    provider=\"google://gemini-1.5-flash\"\n)\n</code></pre> <pre><code>agent = ReactAgent(\n    name=\"Llama Agent\",\n    provider=\"ollama://llama3.2\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#step-8-enable-verbose-mode","title":"Step 8: Enable Verbose Mode","text":"<p>See the agent's reasoning process:</p> <pre><code>agent = ReactAgent(name=\"Debug Agent\")\n\n@agent.tool()\ndef search(query: str) -&gt; str:\n    \"\"\"Search for information\"\"\"\n    return f\"Results for: {query}\"\n\n# Enable verbose mode\nanswer = agent.run(\n    \"Search for Python programming tips\",\n    verbose=True  # Shows step-by-step reasoning\n)\n</code></pre> <p>Output: <pre><code>============================================================\nITERATION 1\n============================================================\n\nThought: I need to search for Python programming tips\nAction: search\nAction Input: Python programming tips\n\nObservation: Results for: Python programming tips\n\nThought: I have the search results\nAction: finish\nAction Input: Found Python programming tips\n\n============================================================\nAnswer: Found Python programming tips\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-9-add-memory","title":"Step 9: Add Memory","text":"<p>Make your agent remember conversations:</p> <pre><code>from react_agent_framework import ReactAgent\n\nagent = ReactAgent(\n    name=\"Memory Agent\",\n    enable_memory=True  # Simple memory\n)\n\n@agent.tool()\ndef save_note(note: str) -&gt; str:\n    \"\"\"Save a note\"\"\"\n    return f\"Saved: {note}\"\n\n# First conversation\nagent.run(\"Save a note: Meeting at 3pm\")\n\n# Later conversation - agent remembers context\nagent.run(\"What time is my meeting?\")\n# Agent can use memory to recall the saved note\n</code></pre>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Build Complete Agents</p> <p>Learn to build sophisticated agents</p> <p> First Agent Tutorial</p> </li> <li> <p> Explore Built-in Tools</p> <p>Discover all available tools</p> <p> Built-in Tools</p> </li> <li> <p> Add Memory</p> <p>Give your agent memory</p> <p> Memory Systems</p> </li> <li> <p> Use MCP Servers</p> <p>Connect to external tools</p> <p> MCP Integration</p> </li> </ul>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#research-agent","title":"Research Agent","text":"<pre><code>agent = ReactAgent(name=\"Researcher\")\nagent.use_tools(\"search.*\")\n\nanswer = agent.run(\"Research quantum computing applications\")\n</code></pre>"},{"location":"getting-started/quickstart/#file-management-agent","title":"File Management Agent","text":"<pre><code>agent = ReactAgent(name=\"File Manager\")\nagent.use_tools(\"filesystem.*\")\n\nanswer = agent.run(\"List all Python files in current directory\")\n</code></pre>"},{"location":"getting-started/quickstart/#calculator-agent","title":"Calculator Agent","text":"<pre><code>agent = ReactAgent(name=\"Calculator\")\nagent.use_tools(\"computation.*\")\n\nanswer = agent.run(\"Calculate the compound interest on $1000 at 5% for 10 years\")\n</code></pre>"},{"location":"getting-started/quickstart/#multi-tool-agent","title":"Multi-Tool Agent","text":"<pre><code>agent = ReactAgent(name=\"Multi-Tool Agent\")\nagent.use_tools(\"*\")  # All tools\n\nanswer = agent.run(\"Search for Python tutorials and save results to a file\")\n</code></pre> <p>You're Ready!</p> <p>You now know the basics of ReAct Agent Framework. Explore the Features section to learn more!</p>"},{"location":"guides/custom-providers/","title":"Custom-providers","text":"<p>Guide coming soon. See Examples for now.</p>"},{"location":"guides/custom-tools/","title":"Custom-tools","text":"<p>Guide coming soon. See Examples for now.</p>"},{"location":"guides/deployment/","title":"Deployment","text":"<p>Guide coming soon. See Examples for now.</p>"},{"location":"guides/memory-backends/","title":"Memory-backends","text":"<p>Guide coming soon. See Examples for now.</p>"}]}