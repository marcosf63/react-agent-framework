name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v0.9.1, v1.0.0, etc.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to create releases
      id-token: write  # Needed for trusted publishing (optional)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version from tag
      id: get_version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Verify version matches pyproject.toml
      run: |
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Version mismatch!"
          echo "pyproject.toml has version $PYPROJECT_VERSION but tag is v$TAG_VERSION"
          exit 1
        fi

    - name: Build package
      run: |
        python -m build
        echo "âœ… Package built successfully"

    - name: Check package
      run: |
        twine check dist/*
        echo "âœ… Package validation passed"

    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --skip-existing || echo "Package may already exist on TestPyPI"

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "âœ… Published to PyPI successfully"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        body: |
          ## ðŸ“¦ Installation

          ```bash
          pip install react-agent-framework==${{ steps.get_version.outputs.VERSION }}
          ```

          ## ðŸ“š Documentation

          https://marcosf63.github.io/react-agent-framework/

          ## ðŸ”— Links

          - [PyPI](https://pypi.org/project/react-agent-framework/${{ steps.get_version.outputs.VERSION }}/)
          - [Changelog](https://github.com/marcosf63/react-agent-framework/blob/main/CHANGELOG.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
